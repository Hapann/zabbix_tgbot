import logging
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from datetime import datetime
from aiogram import Bot
from logger.logger import logger
from globals import BOT_TOKEN, GROUP_ID, TOPIC_ID

router = APIRouter()

class ZabbixAlert(BaseModel):
    incident_id: int
    event: str
    node: str
    trigger: str
    severity: str
    details: str

@router.on_event("startup")
async def startup_event():
    logger.info("Zabbix API handler started")

@router.post("/alert")
async def receive_alert(alert: ZabbixAlert):
    try:
        logger.info(f"Received Zabbix alert: #{alert.incident_id}")
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"üö® <b>–ù–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç #{alert.incident_id}</b>\n"
            f"üîπ <b>–°–æ–±—ã—Ç–∏–µ:</b> {alert.event}\n"
            f"üåê <b>–ù–∞ —É–∑–ª–µ:</b> {alert.node}\n"
            f"‚ö†Ô∏è <b>–¢—Ä–∏–≥–≥–µ—Ä:</b> {alert.trigger}\n"
            f"üîÑ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> –æ—Ç–∫—Ä—ã—Ç\n"
            f"üî¥ <b>–£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏:</b> {alert.severity}\n"
            f"üìÑ <b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</b> {alert.details}\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        bot = Bot(token=BOT_TOKEN)
        await bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=int(TOPIC_ID),
            text=text,
            parse_mode="HTML"
        )
        
        return {"status": "success"}
    
    except Exception as e:
        logger.error(f"Error processing alert: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))