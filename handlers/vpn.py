import requests
import zipfile
import json
import subprocess
from dotenv import load_dotenv
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import io, os, base64, shutil
import urllib.parse
from aiogram.types import FSInputFile
from aiogram.types import BufferedInputFile


# ===================================================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WGDashboard API
# ===================================================
API_URL = os.getenv("API_URL")
API_KEY = os.getenv("API_KEY")

router = Router()


# ===================================================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è REST
# ===================================================
def wg_request(endpoint, method="GET", payload=None):
    headers = {"wg-dashboard-apikey": API_KEY, "Content-Type": "application/json"}
    url = f"{API_URL}{endpoint}"
    r = requests.request(method, url, json=payload, headers=headers, timeout=10)
    r.raise_for_status()
    return r.json()


def get_interfaces():
    resp = wg_request("/api/getWireguardConfigurations")
    return resp.get("data", [])


def get_peers(config_name: str):
    resp = wg_request(f"/api/getWireguardConfigurationInfo?configurationName={config_name}")
    data = resp.get("data", {})
    return data.get("configurationPeers", [])


def create_peer(config_name: str, peer_name: str):
    resp = wg_request(f"/api/addPeers/{config_name}", "POST", {"name": peer_name})
    peer_data = resp.get("data", [])
    if not peer_data:
        raise Exception(resp.get("message") or "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å peer")
    return peer_data[0].get("id")


def delete_peer(config_name: str, peer_id: str):
    """
    –£–¥–∞–ª—è–µ—Ç peer —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API WGDashboard:
    POST /api/deletePeers/{config_name}
    { "peers": ["<peer_id>"] }
    """
    resp = wg_request(f"/api/deletePeers/{config_name}", "POST", {"peers": [peer_id]})
    return resp.get("status") or resp.get("success", False)


def toggle_config(config_name: str):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ WireGuard‚Äë–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    endpoint = f"/api/toggleWireguardConfiguration?configurationName={config_name}"
    resp = wg_request(endpoint, "GET")
    return resp.get("data"), resp.get("status")


def download_peer_file(config_name: str, peer_id: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ peer —á–µ—Ä–µ–∑ API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (file_name, file_bytes)
    """
    # peer_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ URI‚Äë–∫–æ–¥–∏—Ä—É–µ–º
    encoded_id = urllib.parse.quote(peer_id, safe='')
    endpoint = f"/api/downloadPeer/{config_name}?id={encoded_id}"
    headers = {"wg-dashboard-apikey": API_KEY}
    url = f"{API_URL}{endpoint}"
    r = requests.get(url, headers=headers, timeout=10)
    r.raise_for_status()
    data = r.json().get("data", {})
    file_content = data.get("file", "")
    filename = data.get("fileName", "peer.conf")
    return filename, file_content.encode()


def download_all_peers_zip(config_name: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ peer-–∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Ä—Ö–∏–≤ ZIP (filename, bytes).
    –ï—Å–ª–∏ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å—ã (1), (2) –∏ —Ç.–¥.
    """
    url = f"{API_URL}/api/downloadAllPeers/{config_name}"
    headers = {"wg-dashboard-apikey": API_KEY}
    resp = requests.get(url, headers=headers, timeout=15)
    resp.raise_for_status()
    files = resp.json().get("data", [])

    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, mode="w", compression=zipfile.ZIP_DEFLATED) as zipf:
        used_names = {}
        for item in files:
            base_name = item.get("fileName", "peer").replace("/", "_").strip()
            file_name = base_name + ".conf"

            # –µ—Å–ª–∏ –∏–º—è —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å (1), (2), ...
            if file_name in used_names:
                used_names[file_name] += 1
                name_root = base_name
                suffix = used_names[file_name]
                file_name = f"{name_root}({suffix}).conf"
            else:
                used_names[file_name] = 0

            content = item.get("file", "")
            zipf.writestr(file_name, content)

    zip_buffer.seek(0)
    return f"{config_name}_all_peers.zip", zip_buffer.getvalue()


def delete_wireguard_config(config_name: str):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard"""
    payload = {"ConfigurationName": config_name}
    resp = wg_request("/api/deleteWireguardConfiguration", "POST", payload)
    return resp.get("status") or False, resp.get("message")


def add_wireguard_config(payload: dict):
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard"""
    resp = wg_request("/api/addWireguardConfiguration", "POST", payload)
    return resp.get("status") or False, resp.get("message")

def generate_private_key() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á WireGuard —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—É—é —É—Ç–∏–ª–∏—Ç—É –∏–ª–∏ fallback –≤ Python."""
    wg_path = shutil.which("wg")
    if wg_path:
        return subprocess.check_output([wg_path, "genkey"]).decode().strip()
    return base64.b64encode(os.urandom(32)).decode()

# ===================================================
# FSM
# ===================================================
class VPNStates(StatesGroup):
    interface = State()
    peer_name = State()
    peers_cache = State()
    last_menu_id = State()

class AddConfigStates(StatesGroup):
    waiting_json = State()

# ===================================================
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ / —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# ===================================================
async def _send_or_edit(target, text, state: FSMContext,
                        parse_mode=None, reply_markup=None, force_new=False):
    data = await state.get_data()
    message_id = data.get("last_menu_id")

    # –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if message_id and not force_new:
        try:
            await target.bot.edit_message_text(
                chat_id=target.chat.id,
                message_id=message_id,
                text=text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
            return
        except Exception as e:
            if "can't be edited" not in str(e):
                try:
                    await target.bot.delete_message(target.chat.id, message_id)
                except Exception:
                    pass
            # –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ

    sent = await target.answer(text, parse_mode=parse_mode, reply_markup=reply_markup)
    await state.update_data(last_menu_id=sent.message_id)


# ===================================================
# /vpn ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
# ===================================================
@router.message(F.text == "/vpn")
async def cmd_vpn(message: Message, state: FSMContext):
    await show_interfaces(message, state, force_new=True)


async def show_interfaces(target, state: FSMContext, force_new=False):
    try:
        configs = get_interfaces()
    except Exception as e:
        await _send_or_edit(
            target, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:\n```\n{e}\n```",
            state, parse_mode="Markdown", force_new=True
        )
        return

    if not configs:
        await _send_or_edit(target, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.", state, force_new=True)
        return

    inline = []
    for cfg in configs:
        status = "üü¢" if cfg.get("Status") else "üî¥"
        name = cfg.get("Name", "unknown")
        inline.append([InlineKeyboardButton(text=f"{status} {name}",
                                            callback_data=f"iface:{name}")])

    inline.append([
        InlineKeyboardButton(text="‚ûï‚ÄØ–î–æ–±–∞–≤–∏—Ç—å‚ÄØ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
                             callback_data="add_config")
    ])

    kb = InlineKeyboardMarkup(inline_keyboard=inline)
    await _send_or_edit(target, "–í—ã–±–µ—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:", state,
                        reply_markup=kb, force_new=force_new)


# ===================================================
# –°–ø–∏—Å–æ–∫ peer'–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# ===================================================
@router.callback_query(F.data.startswith("iface:"))
async def iface_selected(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    await state.update_data(interface=iface)
    await show_peers(query.message, iface, state)
    await query.answer()


async def show_peers(message: Message, iface: str, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç peers –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:
    üü¢/üî¥ —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, —Å–ø–∏—Å–æ–∫ peers, –¥–µ–π—Å—Ç–≤–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        info = wg_request(f"/api/getWireguardConfigurationInfo?configurationName={iface}")
        conf_info = info.get("data", {}).get("configurationInfo", {})
        iface_enabled = bool(conf_info.get("Status"))
        iface_status = "üü¢" if iface_enabled else "üî¥"
        peers = info.get("data", {}).get("configurationPeers", [])
    except Exception as e:
        await _send_or_edit(
            message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ peers:\n```\n{e}\n```",
            state, parse_mode="Markdown"
        )
        return

    # ===================== peers =====================
    buttons, row = [], []
    short_cache = []
    for p in peers:
        name = (p.get("name") or "(–±–µ–∑ –∏–º–µ–Ω–∏)")[:20]
        pid = p["id"]
        status_dot = "üü¢" if p.get("status") == "running" else "üî¥"
        label = f"{status_dot} {name}"
        short_cache.append({"id": pid, "name": name})
        row.append(InlineKeyboardButton(text=label, callback_data=f"peerinfo:{pid}"))
        if len(row) == 3:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    # ===================== actions =====================
    # power toggle
    toggle_text = "üü•‚ÄØ–í—ã–∫–ª—é—á–∏—Ç—å‚ÄØ–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å" if iface_enabled else "üü©‚ÄØ–í–∫–ª—é—á–∏—Ç—å‚ÄØ–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"

    # –≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
    buttons.append([
        InlineKeyboardButton(text="üì¶‚ÄØ–°–∫–∞—á–∞—Ç—å‚ÄØ–≤—Å–µ‚ÄØ–∫–æ–Ω—Ñ–∏–≥–∏",
                             callback_data=f"download_all:{iface}"),
        InlineKeyboardButton(text=toggle_text,
                             callback_data=f"toggle_iface:{iface}")
    ])

    # –Ω–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.append([
        InlineKeyboardButton(text="üóë‚ÄØ–£–¥–∞–ª–∏—Ç—å‚ÄØ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
                             callback_data=f"del_config:{iface}")
    ])

    buttons.append([
        InlineKeyboardButton(text="üîÑ‚ÄØ–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh:{iface}"),
        InlineKeyboardButton(text="‚ûï‚ÄØ–î–æ–±–∞–≤–∏—Ç—å‚ÄØpeer", callback_data="peer_add"),
    ])
    buttons.append([
        InlineKeyboardButton(text="‚¨Ö‚ÄØ–ù–∞–∑–∞–¥", callback_data="back_main")
    ])

    # ----------------- –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é -----------------
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    header = f"{iface_status}‚ÄØ*{iface}*‚ÄØ‚Äî‚ÄØ—Å–ø–∏—Å–æ–∫‚ÄØpeer'–æ–≤:"
    await _send_or_edit(message, header, state, parse_mode="Markdown", reply_markup=kb)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º peers –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
    await state.update_data(peers_cache=short_cache)


# ===================================================
# –ö–∞—Ä—Ç–æ—á–∫–∞ peer + —É–¥–∞–ª–µ–Ω–∏–µ
# ===================================================
@router.callback_query(F.data.startswith("peerinfo:"))
async def peer_info(query: CallbackQuery, state: FSMContext):
    """
    –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ peer: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é,
    –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ üì• –°–∫–∞—á–∞—Ç—å, üóë –£–¥–∞–ª–∏—Ç—å, ‚¨Ö –ù–∞–∑–∞–¥.
    """
    peer_id = query.data.split(":", 1)[1]
    data = await state.get_data()
    iface = data.get("interface")
    peers_cache = data.get("peers_cache") or []

    # –∏—â–µ–º peer –≤ –∫–µ—à–µ –∏ –ø–æ API
    peer_name = next((p["name"] for p in peers_cache if p["id"] == peer_id), None)
    peer = next((p for p in get_peers(iface) if p.get("id") == peer_id), None)
    if not peer:
        await query.answer("Peer –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    name = peer.get("name") or peer_name or "(–±–µ–∑ –∏–º–µ–Ω–∏)"
    lines = [
        f"*Peer ‚Äî {name}*",
        f"‚Ä¢ Public Key: `{peer.get('id')}`",
        f"‚Ä¢ Allowed IPs: `{peer.get('allowed_ip')}`",
        f"‚Ä¢ Endpoint Allowed IPs: `{peer.get('endpoint_allowed_ip')}`",
        f"‚Ä¢ DNS: `{peer.get('DNS')}`",
        f"‚Ä¢ Pre-Shared Key: `{peer.get('preshared_key')}`",
        f"‚Ä¢ MTU: `{peer.get('mtu')}`",
        f"‚Ä¢ Keepalive: `{peer.get('keepalive')}`",
        f"‚Ä¢ Status: {'üü¢ running' if peer.get('status') == 'running' else '‚ö´Ô∏è stopped'}",
        f"‚Ä¢ Last handshake: `{peer.get('latest_handshake')}`",
        f"‚Ä¢ Traffic: ‚Üì{peer.get('total_receive')} / ‚Üë{peer.get('total_sent')}‚ÄØGB",
    ]
    text = "\n".join(lines)

    # ===== –ö–ù–û–ü–ö–ò –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π =====
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [   # –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª peer
            InlineKeyboardButton(
                text="üì•‚ÄØ–°–∫–∞—á–∞—Ç—å‚ÄØ—Ñ–∞–π–ª",
                callback_data=f"peer_download:{peer_id}"
            ),
        ],
        [   # –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å peer
            InlineKeyboardButton(
                text="üóë‚ÄØ–£–¥–∞–ª–∏—Ç—å‚ÄØpeer",
                callback_data=f"peer_delask:{peer_id}"
            ),
        ],
        [   # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
            InlineKeyboardButton(
                text="‚¨Ö‚ÄØ–ù–∞–∑–∞–¥",
                callback_data=f"iface:{iface}"
            ),
        ],
    ])

    await _send_or_edit(query.message, text, state,
                        parse_mode="Markdown", reply_markup=kb)
    await query.answer()


# ========== –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ==========
@router.callback_query(F.data.startswith("peer_delask:"))
async def peer_delete_confirm(query: CallbackQuery, state: FSMContext):
    peer_id = query.data.split(":", 1)[1]
    data = await state.get_data()
    iface = data.get("interface")
    peers_cache = data.get("peers_cache") or []
    peer_name = next((p["name"] for p in peers_cache if p["id"] == peer_id), "(–±–µ–∑ –∏–º–µ–Ω–∏)")

    text = f"‚ùó –£–¥–∞–ª–∏—Ç—å peer *{peer_name}* –∏–∑ *{iface}*?"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ‚ÄØ–î–∞", callback_data=f"peer_delyes:{peer_id}"),
            InlineKeyboardButton(text="‚ùå‚ÄØ–ù–µ—Ç", callback_data=f"peerinfo:{peer_id}")
        ]
    ])
    await _send_or_edit(query.message, text, state,
                        parse_mode="Markdown", reply_markup=kb)
    await query.answer()


@router.callback_query(F.data.startswith("peer_delyes:"))
async def peer_delete_yes(query: CallbackQuery, state: FSMContext):
    peer_id = query.data.split(":", 1)[1]
    data = await state.get_data()
    iface = data.get("interface")
    peers_cache = data.get("peers_cache") or []
    name = next((p["name"] for p in peers_cache if p["id"] == peer_id), "(–±–µ–∑ –∏–º–µ–Ω–∏)")

    try:
        if delete_peer(iface, peer_id):
            msg = f"‚ùå‚ÄØPeer *{name}* —É–¥–∞–ª—ë–Ω –∏–∑ `{iface}`"
        else:
            msg = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å peer *{name}*"
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ peer:\n```\n{e}\n```"

    await _send_or_edit(query.message, msg, state, parse_mode="Markdown")
    await show_peers(query.message, iface, state)
    await query.answer()


# ===================================================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ peer
# ===================================================
@router.callback_query(F.data == "peer_add")
async def peer_add_start(query: CallbackQuery, state: FSMContext):
    iface = (await state.get_data()).get("interface")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –û—Ç–º–µ–Ω–∞", callback_data=f"iface:{iface}")]
    ])
    await state.set_state(VPNStates.peer_name)
    await _send_or_edit(query.message,
                        f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ peer –¥–ª—è *{iface}* (–Ω–∞–ø—Ä–∏–º–µ—Ä `client01`):",
                        state, parse_mode="Markdown", reply_markup=kb)
    await query.answer()


@router.message(VPNStates.peer_name)
async def peer_add_finish(message: Message, state: FSMContext):
    iface = (await state.get_data()).get("interface")
    peer_name = message.text.strip()
    try:
        peer_id = create_peer(iface, peer_name)
        await message.answer(
            f"‚úÖ Peer *{peer_name}* —Å–æ–∑–¥–∞–Ω –≤ `{iface}`\nPublic key: `{peer_id}`",
            parse_mode="Markdown"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è peer:\n```\n{e}\n```",
                             parse_mode="Markdown")
    await show_peers(message, iface, state)


# ===================================================
# –°–∫–∞—á–∞—Ç—å peer
# ===================================================
@router.callback_query(F.data.startswith("peer_download:"))
async def peer_download_callback(query: CallbackQuery, state: FSMContext):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç peer‚Äë–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é .conf —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–∞–º—è—Ç–∏.
    """
    peer_id = query.data.split(":", 1)[1]
    data = await state.get_data()
    iface = data.get("interface")
    peers_cache = data.get("peers_cache") or []
    peer_name = next((p["name"] for p in peers_cache if p["id"] == peer_id), "peer")

    try:
        # –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏–∑ WGDashboard API
        filename, content_bytes = download_peer_file(iface, peer_id)
        buffer = io.BytesIO(content_bytes)
        buffer.name = f"{filename}.conf"

        # aiogram 3 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç BufferedInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏
        file_to_send = BufferedInputFile(buffer.getvalue(), filename=f"{filename}.conf")

        await query.message.answer_document(
            document=file_to_send,
            caption=f"üìÑ‚ÄØ–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è‚ÄØ–¥–ª—è‚ÄØ*{peer_name}*",
            parse_mode="Markdown"
        )

        await query.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ", show_alert=False)

    except Exception as e:
        await query.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}", show_alert=True)


# ===================================================
# –°–∫–∞—á–∞—Ç—å –≤—Å–µ –ø–∏—Ä—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –∞—Ä—Ö–∏–≤–µ
# ===================================================
@router.callback_query(F.data.startswith("download_all:"))
async def download_all_peers_callback(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    try:
        filename, zip_bytes = download_all_peers_zip(iface)
        file_to_send = BufferedInputFile(zip_bytes, filename=filename)
        await query.message.answer_document(
            document=file_to_send,
            caption=f"üì¶‚ÄØ–ê—Ä—Ö–∏–≤‚ÄØ–≤—Å–µ—Ö‚ÄØ–∫–æ–Ω—Ñ–∏–≥–æ–≤‚ÄØ–¥–ª—è‚ÄØ*{iface}*",
            parse_mode="Markdown"
        )
        await query.answer("–ê—Ä—Ö–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ", show_alert=False)
    except Exception as e:
        await query.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", show_alert=True)


# ===================================================
# –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# ===================================================
@router.callback_query(F.data.startswith("del_config:"))
async def config_delete_confirm(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    text = f"‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é *{iface}* ?"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ‚ÄØ–î–∞", callback_data=f"del_config_yes:{iface}"),
            InlineKeyboardButton(text="‚ùå‚ÄØ–ù–µ—Ç", callback_data=f"iface:{iface}")
        ]
    ])
    await _send_or_edit(query.message, text, state,
                        parse_mode="Markdown", reply_markup=kb)
    await query.answer()


# ===================================================
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# ===================================================
@router.callback_query(F.data.startswith("del_config_yes:"))
async def config_delete_yes(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    ok, msg = delete_wireguard_config(iface)
    if ok:
        text = f"üóë‚ÄØ–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è *{iface}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."
    else:
        text = f"‚ö†Ô∏è‚ÄØ–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ *{iface}*:\n```\n{msg or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n```"
    await _send_or_edit(query.message, text, state,
                        parse_mode="Markdown")
    await show_interfaces(query.message, state)


# ===================================================
# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# ===================================================
@router.callback_query(F.data.startswith("toggle_iface:"))
async def iface_toggle(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    try:
        new_state, ok = toggle_config(iface)
        if ok:
            text = "üü¢‚ÄØ–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å‚ÄØ–≤–∫–ª—é—á—ë–Ω" if new_state else "üî¥‚ÄØ–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å‚ÄØ–≤—ã–∫–ª—é—á–µ–Ω"
            await query.answer(text, show_alert=False)
        else:
            await query.answer("‚ö†Ô∏è‚ÄØ–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", show_alert=True)
    except Exception as e:
        await query.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        return

    # –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
    await show_peers(query.message, iface, state)


# ===================================================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# ===================================================
@router.callback_query(F.data == "add_config")
async def add_config_start(query: CallbackQuery, state: FSMContext):
    example = (
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ **–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON**:\n"
        "```\n"
        "{\n"
        '  "ConfigurationName": "wg1",\n'
        '  "Address": "10.70.1.1/24",\n'
        '  "ListenPort": 51801\n'
        "}\n"
        "```"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö‚ÄØ–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_main")]
    ])
    await _send_or_edit(query.message, example, state,
                        parse_mode="Markdown", reply_markup=kb)
    await state.set_state(AddConfigStates.waiting_json)
    await query.answer()


@router.message(AddConfigStates.waiting_json)
async def add_config_process(message: Message, state: FSMContext):
    text = message.text.strip()
    if text.startswith("```") and text.endswith("```"):
        text = text.strip("`").strip()
    try:
        payload = json.loads(text)
    except Exception as e:
        await message.answer(f"‚ùå‚ÄØ–û—à–∏–±–∫–∞‚ÄØ—á—Ç–µ–Ω–∏—è‚ÄØJSON:\n```\n{e}\n```", parse_mode="Markdown")
        await show_interfaces(message, state, force_new=True)
        await state.clear()
        return

    # ‚îÄ‚îÄ –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è ‚îÄ‚îÄ
    if not payload.get("PrivateKey"):
        try:
            payload["PrivateKey"] = generate_private_key()
            await message.answer("üîë‚ÄØPrivate‚ÄØkey‚ÄØ—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω‚ÄØ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è‚ÄØ–ù–µ‚ÄØ—É–¥–∞–ª–æ—Å—å‚ÄØ—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å‚ÄØ–∫–ª—é—á:\n```\n{e}\n```",
                                 parse_mode="Markdown")
            await show_interfaces(message, state, force_new=True)
            await state.clear()
            return

    if not payload.get("Protocol"):
        payload["Protocol"] = "wg"

    # —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    ok, msg = add_wireguard_config(payload)
    if ok:
        await message.answer("‚úÖ‚ÄØ–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è‚ÄØ—É—Å–ø–µ—à–Ω–æ‚ÄØ—Å–æ–∑–¥–∞–Ω–∞.")
    else:
        await message.answer(f"‚ö†Ô∏è‚ÄØ–û—à–∏–±–∫–∞‚ÄØ—Å–æ–∑–¥–∞–Ω–∏—è:\n```\n{msg or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è‚ÄØ–æ—à–∏–±–∫–∞'}\n```",
                             parse_mode="Markdown")

    await show_interfaces(message, state, force_new=True)
    await state.clear()


# ===================================================
# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# ===================================================
@router.callback_query(F.data.startswith("del_config:"))
async def config_delete_confirm(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    text = f"‚ùó‚ÄØ–£–¥–∞–ª–∏—Ç—å‚ÄØ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é‚ÄØ*{iface}*?"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ‚ÄØ–î–∞", callback_data=f"del_config_yes:{iface}"),
            InlineKeyboardButton(text="‚ùå‚ÄØ–ù–µ—Ç", callback_data=f"iface:{iface}")
        ]
    ])
    await _send_or_edit(query.message, text, state,
                        parse_mode="Markdown", reply_markup=kb)
    await query.answer()


@router.callback_query(F.data.startswith("del_config_yes:"))
async def config_delete_yes(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    ok, msg = delete_wireguard_config(iface)
    if ok:
        text = f"üóë‚ÄØ–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è‚ÄØ*{iface}*‚ÄØ—É—Å–ø–µ—à–Ω–æ‚ÄØ—É–¥–∞–ª–µ–Ω–∞."
    else:
        text = f"‚ö†Ô∏è‚ÄØ–û—à–∏–±–∫–∞‚ÄØ—É–¥–∞–ª–µ–Ω–∏—è:\n```\n{msg or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è‚ÄØ–æ—à–∏–±–∫–∞'}\n```"
    await _send_or_edit(query.message, text, state, parse_mode="Markdown")
    await show_interfaces(query.message, state)


# ===================================================
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç
# ===================================================
@router.callback_query(F.data.startswith("refresh:"))
async def refresh_iface(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    await show_peers(query.message, iface, state)
    await query.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")


@router.callback_query(F.data == "back_main")
async def back_main(query: CallbackQuery, state: FSMContext):
    await show_interfaces(query.message, state)
    await state.update_data(peers_cache=[])
    await query.answer()


def _bottom_menu(iface: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="peer_add"),
            InlineKeyboardButton(text="üîÅ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh:{iface}")
        ],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])