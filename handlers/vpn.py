import requests
import zipfile
import json
import subprocess
from dotenv import load_dotenv
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import io, os, base64, shutil
import urllib.parse
from aiogram.types import FSInputFile
from aiogram.types import BufferedInputFile
from hashlib import sha1
from globals.config import WG_SERVERS
from logger.logger import logger


# ===================================================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WGDashboard API
# ===================================================
API_URL = os.getenv("API_URL")
API_KEY = os.getenv("API_KEY")

router = Router()


# ===================================================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è REST
# ===================================================
#def wg_request(endpoint, method="GET", payload=None):
#    headers = {"wg-dashboard-apikey": API_KEY, "Content-Type": "application/json"}
#    url = f"{API_URL}{endpoint}"
#    r = requests.request(method, url, json=payload, headers=headers, timeout=10)
#    r.raise_for_status()
#    return r.json()

def wg_request(endpoint, method="GET", payload=None):
    headers = {"wg-dashboard-apikey": API_KEY, "Content-Type": "application/json"}
    url = f"{API_URL}{endpoint}"
#    print(f"[DEBUG] {method} {url} payload={payload}")       # üëà –ª–æ–≥ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    r = requests.request(method, url, json=payload, headers=headers, timeout=10)
#    print(f"[DEBUG] response {r.status_code}: {r.text}")     # üëà –ª–æ–≥ –æ—Ç–≤–µ—Ç–∞
    r.raise_for_status()
    return r.json()


def get_interfaces():
    resp = wg_request("/api/getWireguardConfigurations")
    return resp.get("data", [])


def get_peers(config_name: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ peers, –≤–∫–ª—é—á–∞—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (restricted).
    """
    try:
        resp = wg_request(f"/api/getWireguardConfigurationInfo?configurationName={config_name}")
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ WGDashboard: {e}")

    if not resp or "data" not in resp or resp["data"] is None:
        raise RuntimeError(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç WGDashboard –¥–ª—è {config_name}: {resp}")

    data = resp["data"]

    peers = data.get("configurationPeers", []) or []
    restricted = data.get("configurationRestrictedPeers", []) or []

    for p in restricted:
        p["restricted"] = True

    return peers + restricted


def create_peer(config_name: str, peer_name: str):
    resp = wg_request(f"/api/addPeers/{config_name}", "POST", {"name": peer_name})
    peer_data = resp.get("data", [])
    if not peer_data:
        raise Exception(resp.get("message") or "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å peer")
    return peer_data[0].get("id")


def delete_peer(config_name: str, peer_id: str):
    """
    –£–¥–∞–ª—è–µ—Ç peer —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API WGDashboard:
    POST /api/deletePeers/{config_name}
    { "peers": ["<peer_id>"] }
    """
    resp = wg_request(f"/api/deletePeers/{config_name}", "POST", {"peers": [peer_id]})
    return resp.get("status") or resp.get("success", False)


def toggle_config(config_name: str):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ WireGuard‚Äë–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    endpoint = f"/api/toggleWireguardConfiguration?configurationName={config_name}"
    resp = wg_request(endpoint, "GET")
    return resp.get("data"), resp.get("status")


def download_peer_file(config_name: str, peer_id: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ peer —á–µ—Ä–µ–∑ API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (file_name, file_bytes)
    """
    # peer_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ URI‚Äë–∫–æ–¥–∏—Ä—É–µ–º
    encoded_id = urllib.parse.quote(peer_id, safe='')
    endpoint = f"/api/downloadPeer/{config_name}?id={encoded_id}"
    headers = {"wg-dashboard-apikey": API_KEY}
    url = f"{API_URL}{endpoint}"
    r = requests.get(url, headers=headers, timeout=10)
    r.raise_for_status()
    data = r.json().get("data", {})
    file_content = data.get("file", "")
    filename = data.get("fileName", "peer.conf")
    return filename, file_content.encode()


def download_all_peers_zip(config_name: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ peer-–∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Ä—Ö–∏–≤ ZIP (filename, bytes).
    –ï—Å–ª–∏ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å—ã (1), (2) –∏ —Ç.–¥.
    """
    url = f"{API_URL}/api/downloadAllPeers/{config_name}"
    headers = {"wg-dashboard-apikey": API_KEY}
    resp = requests.get(url, headers=headers, timeout=15)
    resp.raise_for_status()
    files = resp.json().get("data", [])

    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, mode="w", compression=zipfile.ZIP_DEFLATED) as zipf:
        used_names = {}
        for item in files:
            base_name = item.get("fileName", "peer").replace("/", "_").strip()
            file_name = base_name + ".conf"

            # –µ—Å–ª–∏ –∏–º—è —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å (1), (2), ...
            if file_name in used_names:
                used_names[file_name] += 1
                name_root = base_name
                suffix = used_names[file_name]
                file_name = f"{name_root}({suffix}).conf"
            else:
                used_names[file_name] = 0

            content = item.get("file", "")
            zipf.writestr(file_name, content)

    zip_buffer.seek(0)
    return f"{config_name}_all_peers.zip", zip_buffer.getvalue()


def delete_wireguard_config(config_name: str):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard"""
    payload = {"ConfigurationName": config_name}
    resp = wg_request("/api/deleteWireguardConfiguration", "POST", payload)
    return resp.get("status") or False, resp.get("message")


def add_wireguard_config(payload: dict):
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard"""
    resp = wg_request("/api/addWireguardConfiguration", "POST", payload)
    return resp.get("status") or False, resp.get("message")

def generate_private_key() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á WireGuard —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—É—é —É—Ç–∏–ª–∏—Ç—É –∏–ª–∏ fallback –≤ Python."""
    wg_path = shutil.which("wg")
    if wg_path:
        return subprocess.check_output([wg_path, "genkey"]).decode().strip()
    return base64.b64encode(os.urandom(32)).decode()

def short_id(pid: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–¥–æ 10‚ÄØ—Å–∏–º–≤–æ–ª–æ–≤) –¥–ª—è callback_data"""
    return sha1(pid.encode()).hexdigest()[:10]

# ===================================================
# FSM
# ===================================================
class VPNStates(StatesGroup):
    interface = State()
    peer_name = State()
    peers_cache = State()
    last_menu_id = State()

class AddConfigStates(StatesGroup):
    waiting_json = State()


class PeerEditStates(StatesGroup):
    waiting_field = State()       # –∂–¥—ë–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    waiting_value = State()       # –∂–¥—ë–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    confirm_change = State()      # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

class IfaceEditStates(StatesGroup):
    waiting_field = State()
    waiting_value = State()
    confirm_change = State()
    
# ===================================================
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ / —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# ===================================================
async def _send_or_edit(target, text, state: FSMContext,
                        parse_mode=None, reply_markup=None, force_new=False):
    data = await state.get_data()
    message_id = data.get("last_menu_id")

    # –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if message_id and not force_new:
        try:
            await target.bot.edit_message_text(
                chat_id=target.chat.id,
                message_id=message_id,
                text=text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
            return
        except Exception as e:
            if "can't be edited" not in str(e):
                try:
                    await target.bot.delete_message(target.chat.id, message_id)
                except Exception:
                    pass
            # –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ

    sent = await target.answer(text, parse_mode=parse_mode, reply_markup=reply_markup)
    await state.update_data(last_menu_id=sent.message_id)


# ===================================================
# /vpn ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
# ===================================================
async def show_interfaces(target, state: FSMContext, force_new=False):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ WireGuard –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.
    –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
    """
    logger.debug("–ó–∞–ø—É—Å–∫ show_interfaces(force_new=%s)", force_new)
    try:
        configs = get_interfaces()
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ %d –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.", len(configs))
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:")
        await _send_or_edit(
            target,
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:\n```\n{e}\n```",
            state,
            parse_mode="Markdown",
            force_new=force_new
        )
        return

    if not configs:
        logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        await _send_or_edit(
            target, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.", state, force_new=force_new
        )
        return

    inline = []
    for cfg in configs:
        status = "üü¢" if cfg.get("Status") else "üî¥"
        name = cfg.get("Name", "unknown")
        inline.append([InlineKeyboardButton(text=f"{status}‚ÄØ{name}",
                                            callback_data=f"iface:{name}")])

    inline.append([
        InlineKeyboardButton(text="‚ûï‚ÄØ–î–æ–±–∞–≤–∏—Ç—å‚ÄØ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
                             callback_data="add_config")
    ])
    inline.append([
        InlineKeyboardButton(text="üîô‚ÄØ–ö‚ÄØ—Å–ø–∏—Å–∫—É‚ÄØ—Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="back_servers")
    ])

    kb = InlineKeyboardMarkup(inline_keyboard=inline)
    logger.debug("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –º–µ–Ω—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ (%d —ç–ª–µ–º–µ–Ω—Ç–æ–≤).", len(configs))
    await _send_or_edit(
        target,
        "–í—ã–±–µ—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:",
        state,
        reply_markup=kb,
        force_new=force_new
    )


@router.message(F.text == "/vpn")
async def cmd_vpn(message: Message, state: FSMContext):
    """
    –ü–µ—Ä–≤–æ–µ –º–µ–Ω—é: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ WG_SERVERS.
    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–µ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–µ.
    """
    from globals.config import WG_SERVERS

    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /vpn", message.from_user.id)

    if not WG_SERVERS:
        logger.warning("WG_SERVERS –ø—É—Å—Ç: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
        await message.answer("‚ö†Ô∏è‚ÄØ–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ WG_SERVERS.")
        return

    inline = [
        [InlineKeyboardButton(text=srv["name"],
                              callback_data=f"select_server:{srv['name']}")]
        for srv in WG_SERVERS
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=inline)
    logger.debug("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ (%d —à—Ç).", len(WG_SERVERS))

    await _send_or_edit(
        message,
        "üåê‚ÄØ–í—ã–±–µ—Ä–∏‚ÄØ—Å–µ—Ä–≤–µ—Ä‚ÄØ–¥–ª—è‚ÄØ—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        state,
        reply_markup=kb,
        force_new=True
    )


@router.callback_query(F.data.startswith("select_server:"))
async def on_server_selected(query: CallbackQuery, state: FSMContext):
    """
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–µ–Ω—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.
    """
    from globals.config import WG_SERVERS

    server_name = query.data.split(":", 1)[1]
    user_id = query.from_user.id if query.from_user else "unknown"
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–±—Ä–∞–ª —Å–µ—Ä–≤–µ—Ä '%s'", user_id, server_name)

    srv = next((s for s in WG_SERVERS if s["name"] == server_name), None)

    if not srv:
        logger.error("–°–µ—Ä–≤–µ—Ä '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WG_SERVERS", server_name)
        await query.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ FSMContext
    await state.update_data(selected_server=srv)
    logger.debug("FSMContext –æ–±–Ω–æ–≤–ª—ë–Ω: –≤—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä %s", server_name)

    # –ø–æ–¥–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    global API_URL, API_KEY
    API_URL = srv["API_URL"]
    API_KEY = srv["API_KEY"]

    logger.info("[VPN] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω API_URL=%s", API_URL)

    await query.answer(f"‚úÖ‚ÄØ{server_name}‚ÄØ–≤—ã–±—Ä–∞–Ω")
    await show_interfaces(query.message, state, force_new=False)


@router.callback_query(F.data == "back_servers")
async def back_servers(query: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).
    """
    from globals.config import WG_SERVERS

    user_id = query.from_user.id if query.from_user else "unknown"
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤", user_id)

    if not WG_SERVERS:
        logger.warning("WG_SERVERS –ø—É—Å—Ç –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤.")
        await query.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.", show_alert=True)
        return

    inline = [
        [InlineKeyboardButton(text=srv["name"],
                              callback_data=f"select_server:{srv['name']}")]
        for srv in WG_SERVERS
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=inline)

    logger.debug("–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–µ—Ä–≤–µ—Ä–æ–≤ (%d —à—Ç).", len(WG_SERVERS))
    await _send_or_edit(
        query.message,
        "üåê‚ÄØ–í—ã–±–µ—Ä–∏‚ÄØ—Å–µ—Ä–≤–µ—Ä‚ÄØ–¥–ª—è‚ÄØ—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        state,
        reply_markup=kb,
        force_new=False
    )

    await query.answer("‚Ü©Ô∏è‚ÄØ–ö‚ÄØ—Å–ø–∏—Å–∫—É‚ÄØ—Å–µ—Ä–≤–µ—Ä–æ–≤")
    logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–∏–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤.", user_id)


# ===================================================
# –°–ø–∏—Å–æ–∫ peer'–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# ===================================================
@router.callback_query(F.data.startswith("iface:"))
async def iface_selected(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    await state.update_data(interface=iface)
    await show_peers(query.message, iface, state)
    await query.answer()


async def show_peers(message: Message, iface: str, state: FSMContext):
    try:
        info = wg_request(f"/api/getWireguardConfigurationInfo?configurationName={iface}")
        conf_info = info.get("data", {}).get("configurationInfo", {})
        iface_enabled = bool(conf_info.get("Status"))
        iface_status = "üü¢" if iface_enabled else "üî¥"
        data = info.get("data", {})
        peers = data.get("configurationPeers", [])
        restricted_peers = data.get("configurationRestrictedPeers", [])

        # –¥–æ–±–∞–≤–ª—è–µ–º restricted-–ø—Ä–∏–∑–Ω–∞–∫ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
        for p in restricted_peers:
            p["restricted"] = True
        peers.extend(restricted_peers)

    except Exception as e:
        await _send_or_edit(
            message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ peers:\n```\n{e}\n```",
            state, parse_mode="Markdown"
        )
        return

    buttons, row = [], []
    short_cache = []
    for p in peers:
        name = (p.get("name") or "(–±–µ–∑ –∏–º–µ–Ω–∏)")[:20]
        pid = p["id"]
        if p.get("restricted"):
            status_dot = "üü°"
        elif p.get("status") == "running":
            status_dot = "üü¢"
        else:
            status_dot = "üî¥"

        label = f"{status_dot} {name}"
        short_pid = short_id(pid)
        short_cache.append({"id": pid, "short": short_pid, "name": name})

        # —Ç–µ–ø–µ—Ä—å –≤ callback_data –ø–µ—Ä–µ–¥–∞—ë–º iface –∏ short_id
        row.append(InlineKeyboardButton(text=label, callback_data=f"peerinfo:{iface}:{short_pid}"))
        if len(row) == 3:
            buttons.append(row); row = []
    if row:
        buttons.append(row)

    toggle_text = "üü•‚ÄØ–í—ã–∫–ª—é—á–∏—Ç—å‚ÄØ–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å" if iface_enabled else "üü©‚ÄØ–í–∫–ª—é—á–∏—Ç—å‚ÄØ–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
    buttons.append([
        InlineKeyboardButton(text="üì¶‚ÄØ–°–∫–∞—á–∞—Ç—å‚ÄØ–≤—Å–µ‚ÄØ–∫–æ–Ω—Ñ–∏–≥–∏", callback_data=f"download_all:{iface}"),
        InlineKeyboardButton(text=toggle_text, callback_data=f"toggle_iface:{iface}")
    ])
    buttons.append([
        InlineKeyboardButton(text="üóë‚ÄØ–£–¥–∞–ª–∏—Ç—å‚ÄØ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data=f"del_config:{iface}")
    ])
    buttons.append([
        InlineKeyboardButton(text="üîÑ‚ÄØ–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh:{iface}"),
        InlineKeyboardButton(text="‚ûï‚ÄØ–î–æ–±–∞–≤–∏—Ç—å‚ÄØpeer", callback_data="peer_add")
    ])
    buttons.append([
        InlineKeyboardButton(text="‚öôÔ∏è‚ÄØ–ò–∑–º–µ–Ω–∏—Ç—å‚ÄØ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data=f"iface_edit:{iface}")
    ])
    buttons.append([
        InlineKeyboardButton(text="‚¨Ö‚ÄØ–ù–∞–∑–∞–¥", callback_data="back_main")
    ])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await _send_or_edit(
        message, f"{iface_status}‚ÄØ*{iface}*‚ÄØ‚Äî‚ÄØ—Å–ø–∏—Å–æ–∫‚ÄØpeer'–æ–≤:",
        state, parse_mode="Markdown", reply_markup=kb
    )
    await state.update_data(peers_cache=short_cache)



# ================================================================
# –°–ø–∏—Å–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# ================================================================
@router.callback_query(F.data.startswith("iface_edit:"))
async def iface_edit_start(query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    iface = query.data.split(":", 1)[1]
    logger.info(f"[VPN] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {iface}")

    fields = [
        ["Address", "ListenPort"],
        ["PostUp", "PostDown"],
        ["PreUp", "PreDown"],
    ]

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f, callback_data=f"iface_field:{iface}:{f}")]
        for row in fields for f in row
    ])
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨Ö‚ÄØ–ù–∞–∑–∞–¥", callback_data=f"iface:{iface}")])

    await state.update_data(iface=iface)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb)
    await query.answer()
    logger.debug(f"[VPN] –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å {iface}: –ø–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")


@router.callback_query(F.data.startswith("iface_field:"))
async def iface_field_selected(query: CallbackQuery, state: FSMContext):
    """–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∂–¥—ë—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ."""
    _, iface, field = query.data.split(":", 2)
    logger.info(f"[VPN] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–ª–µ {field} –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ {iface}")

    try:
        conf = next((c for c in get_interfaces() if c.get("Name") == iface), None)
        current_value = conf.get(field) if conf and field in conf else "(–ø—É—Å—Ç–æ)"
    except Exception as e:
        logger.exception(f"[VPN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {iface}: {e}")
        await query.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", show_alert=True)
        return

    await state.update_data(iface=iface, field=field, old_value=current_value)
    await state.set_state(IfaceEditStates.waiting_value)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö‚ÄØ–û—Ç–º–µ–Ω–∞", callback_data=f"iface:{iface}")]
    ])

    text = (
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è *{field}*.\n"
        f"–¢–µ–∫—É—â–µ–µ: `{current_value}`"
    )
    await query.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    await query.answer()
    logger.debug(f"[VPN] –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å {iface}, –ø–æ–ª–µ {field}: —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{current_value}' –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")



# ================================================================
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# ================================================================
@router.message(IfaceEditStates.waiting_value)
async def iface_edit_get_value(message: Message, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ -> –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å."""
    new_value = message.text.strip()
    data = await state.get_data()
    field = data.get("field")
    old_value = data.get("old_value")
    iface = data.get("iface")

    logger.info(f"[VPN] –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å {iface}, –ø–∞—Ä–∞–º–µ—Ç—Ä {field}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{new_value}' "
                f"(—Å—Ç–∞—Ä–æ–µ '{old_value}')")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ‚ÄØ–î–∞", callback_data="iface_confirm_yes"),
            InlineKeyboardButton(text="‚ùå‚ÄØ–ù–µ—Ç", callback_data="iface_confirm_no")
        ]
    ])
    text = (
        f"–ò–∑–º–µ–Ω–∏—Ç—å `{field}`:\n"
        f"‚Ä¢ –ë—ã–ª–æ: `{old_value}`\n"
        f"‚Ä¢ –°—Ç–∞–ª–æ: `{new_value}`"
    )

    await state.update_data(new_value=new_value)
    await state.set_state(IfaceEditStates.confirm_change)
    await message.answer(text, parse_mode="Markdown", reply_markup=kb)



@router.callback_query(F.data == "iface_confirm_yes")
async def iface_confirm_yes(query: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: —Å–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —à–ª—ë—Ç updateWireguardConfiguration."""
    data = await state.get_data()
    iface = data.get("iface")
    field = data.get("field")
    new_value = data.get("new_value")

    if not iface:
        logger.warning("[VPN] iface –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        await query.answer("–û—à–∏–±–∫–∞: –∏–º—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=True)
        await state.clear()
        return

    FIELD_TYPES = {
        "Address": str,
        "ListenPort": int,
        "PostUp": str,
        "PostDown": str,
        "PreUp": str,
        "PreDown": str,
    }

    try:
        conf = next((c for c in get_interfaces() if c.get("Name") == iface), None)
        if not conf:
            logger.warning(f"[VPN] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {iface} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            await query.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            await state.clear()
            return

        update_payload = {
            "Name": iface,
            "Address": conf.get("Address"),
            "ListenPort": int(conf.get("ListenPort") or 0),
            "PostUp": conf.get("PostUp", ""),
            "PostDown": conf.get("PostDown", ""),
            "PreUp": conf.get("PreUp", ""),
            "PreDown": conf.get("PreDown", ""),
            "PrivateKey": conf.get("PrivateKey", ""),
            "PublicKey": conf.get("PublicKey", ""),
            "Protocol": conf.get("Protocol", "wg"),
            "SaveConfig": conf.get("SaveConfig", True),
            "Table": conf.get("Table", "")
        }

        expected_type = FIELD_TYPES.get(field, str)
        if expected_type is int:
            try:
                update_payload[field] = int(new_value)
            except ValueError:
                logger.warning(f"[VPN] –ü–æ–ª–µ {field} –æ–∂–∏–¥–∞–ª–æ —á–∏—Å–ª–æ, –ø–æ–ª—É—á–µ–Ω–æ '{new_value}'")
                await query.answer(f"–ü–æ–ª–µ {field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º", show_alert=True)
                return
        else:
            update_payload[field] = str(new_value)

        logger.info(f"[VPN] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {iface}: {field}: '{conf.get(field)}' ‚Üí '{new_value}'")
        logger.debug(f"[VPN] updateWireguardConfiguration payload={update_payload}")

        result = wg_request("/api/updateWireguardConfiguration", "POST", update_payload)
        logger.debug(f"[VPN] –û—Ç–≤–µ—Ç WGDashboard –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {iface}: {result}")

        if not result.get("status"):
            raise RuntimeError(result.get("message") or "WGDashboard –≤–µ—Ä–Ω—É–ª status=False")

        logger.info(f"[VPN] –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å {iface} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω (–ø–æ–ª–µ {field})")
        await query.answer("‚úÖ‚ÄØ–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞", show_alert=False)

    except Exception as e:
        logger.exception(f"[VPN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {iface}: {e}")
        await query.answer(f"‚ö†Ô∏è‚ÄØ–û—à–∏–±–∫–∞: {e}", show_alert=True)
        return

    await state.clear()
    await show_peers(query.message, iface, state)


@router.callback_query(F.data == "iface_confirm_no")
async def iface_confirm_no(query: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è -> –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    data = await state.get_data()
    iface = data.get("iface")

    logger.info(f"[VPN] –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {iface} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    await query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", show_alert=False)
    await state.clear()
    await show_peers(query.message, iface, state)


# ================================================================
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ peer (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏ –ø—Ä—è–º–æ, –∏ —á–µ—Ä–µ–∑ callbacks)
# ================================================================
async def peer_info_from_data(message: Message, iface: str, peer_short: str, state: FSMContext):
    """–†–∏—Å—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É peer –ø–æ iface –∏ short_id."""
    data = await state.get_data()
    peers_cache = data.get("peers_cache") or []

    peer_id = next((p["id"] for p in peers_cache if p["short"] == peer_short), None)
    if not peer_id:
        await message.answer("Peer –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    peer = next((p for p in get_peers(iface) if p.get("id") == peer_id), None)
    if not peer:
        await message.answer("Peer –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    name = peer.get("name") or "(–±–µ–∑ –∏–º–µ–Ω–∏)"
    is_restricted = bool(peer.get("restricted"))
    is_running = peer.get("status") == "running"

    if is_restricted:
        status_emoji = "üü° restricted"
    elif is_running:
        status_emoji = "üü¢ running"
    else:
        status_emoji = "‚ö´Ô∏è stopped"

    lines = [
        f"*Peer ‚Äî {name}*",
        f"‚Ä¢ Public Key: `{peer.get('id')}`",
        f"‚Ä¢ Allowed IPs: `{peer.get('allowed_ip')}`",
        f"‚Ä¢ Endpoint Allowed IPs: `{peer.get('endpoint_allowed_ip')}`",
        f"‚Ä¢ DNS: `{peer.get('DNS')}`",
        f"‚Ä¢ Pre‚ÄëShared Key: `{peer.get('preshared_key')}`",
        f"‚Ä¢ MTU: `{peer.get('mtu')}`",
        f"‚Ä¢ Keepalive: `{peer.get('keepalive')}`",
        f"‚Ä¢ Status: {status_emoji}",
        f"‚Ä¢ Last handshake: `{peer.get('latest_handshake')}`",
        f"‚Ä¢ Traffic: ‚Üì{peer.get('total_receive')} / ‚Üë{peer.get('total_sent')}‚ÄØGB",
    ]
    text = "\n".join(lines)

    toggle_label = "‚ôªÔ∏è‚ÄØ–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if is_restricted else "üö´‚ÄØ–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì•‚ÄØ–°–∫–∞—á–∞—Ç—å‚ÄØ—Ñ–∞–π–ª", callback_data=f"peer_download:{iface}:{peer_short}")],
        [InlineKeyboardButton(text="‚öôÔ∏è‚ÄØ–ò–∑–º–µ–Ω–∏—Ç—å‚ÄØpeer", callback_data=f"peer_edit:{iface}:{peer_short}")],
        [InlineKeyboardButton(text=toggle_label, callback_data=f"peer_toggle_restrict:{iface}:{peer_short}")],
        [InlineKeyboardButton(text="üóë‚ÄØ–£–¥–∞–ª–∏—Ç—å‚ÄØpeer", callback_data=f"peer_delask:{iface}:{peer_short}")],
        [InlineKeyboardButton(text="‚¨Ö‚ÄØ–ù–∞–∑–∞–¥", callback_data=f"iface:{iface}")],
    ])

    await _send_or_edit(message, text, state, parse_mode="Markdown", reply_markup=kb)


# ===================================================
# –ö–∞—Ä—Ç–æ—á–∫–∞ peer + —É–¥–∞–ª–µ–Ω–∏–µ
# ===================================================
@router.callback_query(F.data.startswith("peerinfo:"))
async def peer_info(query: CallbackQuery, state: FSMContext):
    parts = query.data.split(":", 2)
    if len(parts) < 3:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback", show_alert=True)
        return
    _, iface, peer_short = parts

    await peer_info_from_data(query.message, iface, peer_short, state)
    await query.answer()


# ========== –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ==========
@router.callback_query(F.data.startswith("peer_delask:"))
async def peer_delete_confirm(query: CallbackQuery, state: FSMContext):
    peer_short = query.data.split(":", 1)[1]
    data = await state.get_data()
    iface = data.get("interface")
    peers_cache = data.get("peers_cache") or []

    peer_id = next((p["id"] for p in peers_cache if p["short"] == peer_short), None)
    peer_name = next((p["name"] for p in peers_cache if p["short"] == peer_short), "(–±–µ–∑ –∏–º–µ–Ω–∏)")

    if not peer_id:
        await query.answer("Peer –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    text = f"‚ùó –£–¥–∞–ª–∏—Ç—å peer *{peer_name}* –∏–∑ *{iface}*?"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ‚ÄØ–î–∞", callback_data=f"peer_delyes:{peer_short}"),
            InlineKeyboardButton(text="‚ùå‚ÄØ–ù–µ—Ç", callback_data=f"peerinfo:{peer_short}")
        ]
    ])
    await _send_or_edit(query.message, text, state, parse_mode="Markdown", reply_markup=kb)
    await query.answer()


@router.callback_query(F.data.startswith("peer_delyes:"))
async def peer_delete_yes(query: CallbackQuery, state: FSMContext):
    peer_short = query.data.split(":", 1)[1]
    data = await state.get_data()
    iface = data.get("interface")
    peers_cache = data.get("peers_cache") or []

    peer_id = next((p["id"] for p in peers_cache if p["short"] == peer_short), None)
    name = next((p["name"] for p in peers_cache if p["short"] == peer_short), "(–±–µ–∑ –∏–º–µ–Ω–∏)")

    if not peer_id:
        await query.answer("Peer –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        logger.info(f"[VPN] –£–¥–∞–ª–µ–Ω–∏–µ peer {name} ({peer_id}) –∏–∑ {iface}")
        if delete_peer(iface, peer_id):
            msg = f"‚ùå‚ÄØPeer *{name}* —É–¥–∞–ª—ë–Ω –∏–∑ `{iface}`"
            logger.info(f"[VPN] Peer {name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ {iface}")
        else:
            msg = f"‚ö†Ô∏è‚ÄØ–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å peer *{name}*"
            logger.warning(f"[VPN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å peer {name} ({peer_id})")
    except Exception as e:
        logger.exception(f"[VPN] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ peer {name} ({peer_id}): {e}")
        msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ peer:\n```\n{e}\n```"

    await _send_or_edit(query.message, msg, state, parse_mode="Markdown")
    await show_peers(query.message, iface, state)
    await query.answer()

# ===================================================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ peer
# ===================================================
@router.callback_query(F.data == "peer_add")
async def peer_add_start(query: CallbackQuery, state: FSMContext):
    iface = (await state.get_data()).get("interface")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –û—Ç–º–µ–Ω–∞", callback_data=f"iface:{iface}")]
    ])
    await state.set_state(VPNStates.peer_name)
    await _send_or_edit(query.message,
                        f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ peer –¥–ª—è *{iface}* (–Ω–∞–ø—Ä–∏–º–µ—Ä `client01`):",
                        state, parse_mode="Markdown", reply_markup=kb)
    await query.answer()


@router.message(VPNStates.peer_name)
async def peer_add_finish(message: Message, state: FSMContext):
    iface = (await state.get_data()).get("interface")
    peer_name = message.text.strip()
    try:
        logger.info(f"[VPN] –°–æ–∑–¥–∞–Ω–∏–µ peer '{peer_name}' –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {iface}")
        peer_id = create_peer(iface, peer_name)
        logger.info(f"[VPN] Peer '{peer_name}' —Å–æ–∑–¥–∞–Ω –≤ {iface}, id={peer_id}")
        await message.answer(
            f"‚úÖ Peer *{peer_name}* —Å–æ–∑–¥–∞–Ω –≤ `{iface}`\nPublic key: `{peer_id}`",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.exception(f"[VPN] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è peer '{peer_name}' –≤ {iface}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è peer:\n```\n{e}\n```", parse_mode="Markdown")
    await show_peers(message, iface, state)


# ===================================================
# –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å peer
# ===================================================
@router.callback_query(F.data.startswith("peer_toggle_restrict:"))
async def toggle_restrict(query: CallbackQuery, state: FSMContext):
    _, iface, peer_short = query.data.split(":", 2)
    data = await state.get_data()
    peers_cache = data.get("peers_cache") or []
    peer_id = next((p["id"] for p in peers_cache if p["short"] == peer_short), None)
    if not peer_id:
        await query.answer("Peer –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        peer = next((p for p in get_peers(iface) if p.get("id") == peer_id), None)
        if not peer:
            await query.answer("Peer –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        restricted = bool(peer.get("restricted"))
        if restricted:
            endpoint = f"/api/allowAccessPeers/{iface}"
            human = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        else:
            endpoint = f"/api/restrictPeers/{iface}"
            human = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"

        wg_request(endpoint, "POST", {"peers": [peer_id]})
        logger.info(f"[VPN] Peer {peer.get('name')} ({peer_id}) –≤ {iface} {human}")
        await query.answer(f"‚ôªÔ∏è‚ÄØPeer {peer.get('name')} {human}", show_alert=False)
        await peer_info(query, state)
    except Exception as e:
        logger.exception(f"[VPN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ peer {peer_id}: {e}")
        await query.answer(f"‚ö†Ô∏è‚ÄØ–û—à–∏–±–∫–∞: {e}", show_alert=True)


# ===================================================
# –ò–∑–º–µ–Ω–∏—Ç—å peer
# ===================================================
@router.callback_query(F.data.startswith("peer_edit:"))
async def peer_edit_start(query: CallbackQuery, state: FSMContext):
    # peer_edit:<iface>:<short_id>
    _, iface, peer_short = query.data.split(":", 2)
    data = await state.get_data()
    peers_cache = data.get("peers_cache") or []
    peer_id = next((p["id"] for p in peers_cache if p["short"] == peer_short), None)

    fields = [
        ["name", "allowed_ip"],
        ["endpoint_allowed_ip", "DNS"],
        ["keepalive", "mtu"],
        ["preshared_key", "private_key"],
    ]

    # –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, peer –∏ –∏–º—è –ø–æ–ª—è
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f, callback_data=f"edit_field:{iface}:{peer_short}:{f}")]
        for row in fields for f in row
    ])
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨Ö‚ÄØ–û—Ç–º–µ–Ω–∞", callback_data=f"peerinfo:{iface}:{peer_short}")])

    await state.update_data(peer_id=peer_id, iface=iface, peer_short=peer_short)
    await _send_or_edit(query.message, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:", state, reply_markup=kb)
    await query.answer()

# ===================================================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è peer
# ===================================================
@router.callback_query(F.data.startswith("edit_field:"))
async def peer_edit_field_selected(query: CallbackQuery, state: FSMContext):
    """
    –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è peer –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –§–æ—Ä–º–∞—Ç callback_data: edit_field:<iface>:<short_id>:<field>
    """
    parts = query.data.split(":", 3)
    if len(parts) < 4:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    _, iface, peer_short, field = parts

    data = await state.get_data()
    peers_cache = data.get("peers_cache") or []
    peer_id = next((p["id"] for p in peers_cache if p["short"] == peer_short), None)

    peer = next((p for p in get_peers(iface) if p.get("id") == peer_id), None)
    current_value = peer.get(field) if peer and peer.get(field) is not None else "(–ø—É—Å—Ç–æ)"

    await state.update_data(
        edit_field=field, old_value=current_value,
        iface=iface, peer_id=peer_id, peer_short=peer_short
    )
    await state.set_state(PeerEditStates.waiting_value)

    text = (
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è *{field}*.\n"
        f"–¢–µ–∫—É—â–µ–µ: `{current_value}`"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö‚ÄØ–û—Ç–º–µ–Ω–∞", callback_data=f"peerinfo:{iface}:{peer_short}")]
    ])

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
    await query.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    await query.answer()


# ===================================================
# –í–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è peer
# ===================================================
@router.message(PeerEditStates.waiting_value)
async def peer_edit_get_value(message: Message, state: FSMContext):
    new_value = message.text.strip()
    data = await state.get_data()
    field = data.get("edit_field")
    old_value = data.get("old_value")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ‚ÄØ–î–∞", callback_data="edit_confirm_yes"),
            InlineKeyboardButton(text="‚ùå‚ÄØ–ù–µ—Ç", callback_data="edit_confirm_no")
        ]
    ])

    text = (
        f"–ò–∑–º–µ–Ω–∏—Ç—å `{field}`:\n"
        f"‚Ä¢ –ë—ã–ª–æ: `{old_value}`\n"
        f"‚Ä¢ –°—Ç–∞–ª–æ: `{new_value}`"
    )

    await state.update_data(new_value=new_value)
    await state.set_state(PeerEditStates.confirm_change)

    #  —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ ¬´–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ...¬ª
    await message.answer(text, parse_mode="Markdown", reply_markup=kb)


# ===================================================
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è peer
# ===================================================
@router.callback_query(F.data == "edit_confirm_yes")
async def peer_edit_confirm_yes(query: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ peer:
    - –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ peer
    - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–æ–ª—è (—á–∏—Å–ª–æ, —Å—Ç—Ä–æ–∫–∞)
    - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É
    - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π updatePeerSettings
    """
    data = await state.get_data()
    iface = data.get("iface")
    peer_id = data.get("peer_id")
    field = data.get("edit_field")
    new_value = data.get("new_value")

    if not iface:
        logger.warning("[VPN] iface –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è peer")
        await query.answer("–û—à–∏–±–∫–∞: iface –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=True)
        await state.clear()
        return

    FIELD_TYPES = {
        "DNS": str,
        "allowed_ip": str,
        "endpoint_allowed_ip": str,
        "name": str,
        "preshared_key": str,
        "private_key": str,
        "keepalive": int,
        "mtu": int,
    }

    try:
        peers = get_peers(iface)
        peer = next((p for p in peers if p.get("id") == peer_id), None)
        if not peer:
            logger.warning(f"[VPN] Peer {peer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {iface}")
            await query.answer("Peer –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await state.clear()
            return

        old_value = peer.get(field)
        logger.info(f"[VPN] –ò–∑–º–µ–Ω–µ–Ω–∏–µ peer {peer.get('name')} ({peer_id}) –≤ {iface}: "
                    f"{field}: '{old_value}' ‚Üí '{new_value}'")

        update_payload = {
            "id": peer_id,
            "DNS": peer.get("DNS", ""),
            "allowed_ip": peer.get("allowed_ip", ""),
            "endpoint_allowed_ip": peer.get("endpoint_allowed_ip", ""),
            "keepalive": peer.get("keepalive", 0),
            "mtu": peer.get("mtu", 1420),
            "name": peer.get("name", ""),
            "preshared_key": peer.get("preshared_key", ""),
            "private_key": peer.get("private_key", "")
        }

        expected_type = FIELD_TYPES.get(field, str)
        if expected_type is int:
            try:
                update_payload[field] = int(new_value)
            except ValueError:
                logger.warning(f"[VPN] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{new_value}' –¥–ª—è –ø–æ–ª—è {field} (–æ–∂–∏–¥–∞–ª–æ—Å—å —á–∏—Å–ª–æ)")
                await query.answer(f"–ü–æ–ª–µ {field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º", show_alert=True)
                return
        else:
            update_payload[field] = str(new_value)

        logger.debug(f"[VPN] updatePeerSettings/{iface} payload={update_payload}")
        result = wg_request(f"/api/updatePeerSettings/{iface}", "POST", update_payload)
        logger.debug(f"[VPN] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è peer: {result}")

        if not result.get("status"):
            raise RuntimeError(result.get("message") or "WGDashboard –≤–µ—Ä–Ω—É–ª status=False")

        logger.info(f"[VPN] Peer {peer.get('name')} ({peer_id}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        await query.answer("‚úÖ‚ÄØ–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã", show_alert=False)

    except Exception as e:
        logger.exception(f"[VPN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ peer {peer_id} –≤ {iface}: {e}")
        await query.answer(f"‚ö†Ô∏è‚ÄØ–û—à–∏–±–∫–∞: {e}", show_alert=True)
        return

    await state.clear()
    await show_peers(query.message, iface, state)


@router.callback_query(F.data == "edit_confirm_no")
async def peer_edit_confirm_no(query: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è peer."""
    data = await state.get_data()
    iface = data.get("iface")
    peer_short = data.get("peer_short")

    if not iface or not peer_short:
        logger.warning("[VPN] –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è peer: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç iface –∏–ª–∏ peer_short")
        await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    logger.info(f"[VPN] –ò–∑–º–µ–Ω–µ–Ω–∏–µ peer (iface={iface}, short={peer_short}) –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    await query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", show_alert=False)
    for k in ("edit_field", "new_value", "old_value", "peer_id"):
        data.pop(k, None)
    await state.update_data(**data)
    await peer_info_from_data(query.message, iface, peer_short, state)



# ===================================================
# –°–∫–∞—á–∞—Ç—å peer
# ===================================================
@router.callback_query(F.data.startswith("peer_download:"))
async def peer_download_callback(query: CallbackQuery, state: FSMContext):
    _, iface, peer_short = query.data.split(":", 2)
    data = await state.get_data()
    peers_cache = data.get("peers_cache") or []

    peer_id = next((p["id"] for p in peers_cache if p["short"] == peer_short), None)
    peer_name = next((p["name"] for p in peers_cache if p["short"] == peer_short), "peer")

    if not peer_id:
        logger.warning(f"[VPN] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ peer: –Ω–µ –Ω–∞–π–¥–µ–Ω short_id={peer_short} –≤ {iface}")
        await query.answer("Peer –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    logger.info(f"[VPN] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ peer {peer_name} ({peer_id}) –∏–∑ {iface}")
    try:
        filename, content_bytes = download_peer_file(iface, peer_id)
        buffer = io.BytesIO(content_bytes)
        file_to_send = BufferedInputFile(buffer.getvalue(), filename=f"{filename}.conf")

        await query.message.answer_document(
            document=file_to_send,
            caption=f"üìÑ‚ÄØ–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è‚ÄØ–¥–ª—è‚ÄØ*{peer_name}*",
            parse_mode="Markdown"
        )
        logger.info(f"[VPN] –ö–æ–Ω—Ñ–∏–≥ {filename}.conf –¥–ª—è peer {peer_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        await query.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ", show_alert=False)

    except Exception as e:
        logger.exception(f"[VPN] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ peer {peer_name} ({peer_id}): {e}")
        await query.answer(f"‚ö†Ô∏è‚ÄØ–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}", show_alert=True)


# ===================================================
# –°–∫–∞—á–∞—Ç—å –≤—Å–µ –ø–∏—Ä—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –∞—Ä—Ö–∏–≤–µ
# ===================================================
@router.callback_query(F.data.startswith("download_all:"))
async def download_all_peers_callback(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    logger.info(f"[VPN] –ó–∞–ø—Ä–æ—à–µ–Ω–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –≤—Å–µ—Ö peer –¥–ª—è {iface}")
    try:
        filename, zip_bytes = download_all_peers_zip(iface)
        file_to_send = BufferedInputFile(zip_bytes, filename=filename)

        await query.message.answer_document(
            document=file_to_send,
            caption=f"üì¶‚ÄØ–ê—Ä—Ö–∏–≤‚ÄØ–≤—Å–µ—Ö‚ÄØ–∫–æ–Ω—Ñ–∏–≥–æ–≤‚ÄØ–¥–ª—è‚ÄØ*{iface}*",
            parse_mode="Markdown"
        )
        logger.info(f"[VPN] –ê—Ä—Ö–∏–≤ {filename} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        await query.answer("–ê—Ä—Ö–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ", show_alert=False)
    except Exception as e:
        logger.exception(f"[VPN] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ peer –¥–ª—è {iface}: {e}")
        await query.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", show_alert=True)


# ===================================================
# –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# ===================================================
@router.callback_query(F.data.startswith("del_config:"))
async def config_delete_confirm(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    logger.info(f"[VPN] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {iface}")

    text = f"‚ùó‚ÄØ–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é *{iface}* ?"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ‚ÄØ–î–∞", callback_data=f"del_config_yes:{iface}"),
            InlineKeyboardButton(text="‚ùå‚ÄØ–ù–µ—Ç", callback_data=f"iface:{iface}")
        ]
    ])
    await _send_or_edit(query.message, text, state,
                        parse_mode="Markdown", reply_markup=kb)
    await query.answer()


# ===================================================
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# ===================================================
@router.callback_query(F.data.startswith("del_config_yes:"))
async def config_delete_yes(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    ok, msg = delete_wireguard_config(iface)
    if ok:
        text = f"üóë‚ÄØ–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è *{iface}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."
    else:
        text = f"‚ö†Ô∏è‚ÄØ–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ *{iface}*:\n```\n{msg or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n```"
    await _send_or_edit(query.message, text, state,
                        parse_mode="Markdown")
    await show_interfaces(query.message, state)


# ===================================================
# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# ===================================================
@router.callback_query(F.data.startswith("toggle_iface:"))
async def iface_toggle(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    try:
        logger.info(f"[VPN] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {iface}...")
        new_state, ok = toggle_config(iface)
        if ok:
            human_state = "–≤–∫–ª—é—á—ë–Ω" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω"
            logger.info(f"[VPN] –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å {iface} —É—Å–ø–µ—à–Ω–æ {human_state}")
            text = "üü¢‚ÄØ–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å‚ÄØ–≤–∫–ª—é—á—ë–Ω" if new_state else "üî¥‚ÄØ–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å‚ÄØ–≤—ã–∫–ª—é—á–µ–Ω"
            await query.answer(text, show_alert=False)
        else:
            logger.warning(f"[VPN] WGDashboard –≤–µ—Ä–Ω—É–ª status=False –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ {iface}")
            await query.answer("‚ö†Ô∏è‚ÄØ–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", show_alert=True)
    except Exception as e:
        logger.exception(f"[VPN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {iface}: {e}")
        await query.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        return

    await show_peers(query.message, iface, state)


# ===================================================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# ===================================================
@router.callback_query(F.data == "add_config")
async def add_config_start(query: CallbackQuery, state: FSMContext):
    example = (
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ **–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON**:\n"
        "```\n"
        "{\n"
        '  "ConfigurationName": "wg1",\n'
        '  "Address": "10.70.1.1/24",\n'
        '  "ListenPort": 51801\n'
        "}\n"
        "```"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö‚ÄØ–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_main")]
    ])
    await _send_or_edit(query.message, example, state,
                        parse_mode="Markdown", reply_markup=kb)
    await state.set_state(AddConfigStates.waiting_json)
    await query.answer()


@router.message(AddConfigStates.waiting_json)
async def add_config_process(message: Message, state: FSMContext):
    text = message.text.strip()
    if text.startswith("```") and text.endswith("```"):
        text = text.strip("`").strip()
    try:
        payload = json.loads(text)
        logger.info(f"[VPN] –ó–∞–ø—Ä–æ—à–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {payload}")
    except Exception as e:
        logger.exception("[VPN] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        await message.answer(f"‚ùå‚ÄØ–û—à–∏–±–∫–∞‚ÄØ—á—Ç–µ–Ω–∏—è‚ÄØJSON:\n```\n{e}\n```", parse_mode="Markdown")
        await show_interfaces(message, state, force_new=True)
        await state.clear()
        return

    try:
        if not payload.get("PrivateKey"):
            payload["PrivateKey"] = generate_private_key()
            logger.debug(f"[VPN] PrivateKey –¥–ª—è {payload.get('ConfigurationName')} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

        if not payload.get("Protocol"):
            payload["Protocol"] = "wg"

        ok, msg = add_wireguard_config(payload)
        if ok:
            logger.info(f"[VPN] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {payload.get('ConfigurationName')} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
            await message.answer("‚úÖ‚ÄØ–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è‚ÄØ—É—Å–ø–µ—à–Ω–æ‚ÄØ—Å–æ–∑–¥–∞–Ω–∞.")
        else:
            logger.error(f"[VPN] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {payload.get('ConfigurationName')}: {msg}")
            await message.answer(f"‚ö†Ô∏è‚ÄØ–û—à–∏–±–∫–∞‚ÄØ—Å–æ–∑–¥–∞–Ω–∏—è:\n```\n{msg or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n```",
                                 parse_mode="Markdown")
    except Exception as e:
        logger.exception(f"[VPN] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        await message.answer(f"‚ö†Ô∏è‚ÄØ–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n```\n{e}\n```",
                             parse_mode="Markdown")

    await show_interfaces(message, state, force_new=True)
    await state.clear()


# ===================================================
# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# ===================================================
@router.callback_query(F.data.startswith("del_config:"))
async def config_delete_confirm(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    text = f"‚ùó‚ÄØ–£–¥–∞–ª–∏—Ç—å‚ÄØ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é‚ÄØ*{iface}*?"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ‚ÄØ–î–∞", callback_data=f"del_config_yes:{iface}"),
            InlineKeyboardButton(text="‚ùå‚ÄØ–ù–µ—Ç", callback_data=f"iface:{iface}")
        ]
    ])
    await _send_or_edit(query.message, text, state,
                        parse_mode="Markdown", reply_markup=kb)
    await query.answer()


@router.callback_query(F.data.startswith("del_config_yes:"))
async def config_delete_yes(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    try:
        logger.info(f"[VPN] –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {iface} –∑–∞–ø—É—â–µ–Ω–æ")
        ok, msg = delete_wireguard_config(iface)
        if ok:
            logger.info(f"[VPN] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {iface} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            text = f"üóë‚ÄØ–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è‚ÄØ*{iface}*‚ÄØ—É—Å–ø–µ—à–Ω–æ‚ÄØ—É–¥–∞–ª–µ–Ω–∞."
        else:
            logger.error(f"[VPN] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {iface}: {msg}")
            text = f"‚ö†Ô∏è‚ÄØ–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏‚ÄØ*{iface}*:\n```\n{msg or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n```"
    except Exception as e:
        logger.exception(f"[VPN] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {iface}: {e}")
        text = f"‚ùå‚ÄØ–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:\n```\n{e}\n```"

    await _send_or_edit(query.message, text, state, parse_mode="Markdown")
    await show_interfaces(query.message, state)


# ===================================================
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç
# ===================================================
@router.callback_query(F.data.startswith("refresh:"))
async def refresh_iface(query: CallbackQuery, state: FSMContext):
    iface = query.data.split(":", 1)[1]
    await show_peers(query.message, iface, state)
    await query.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")


@router.callback_query(F.data == "back_main")
async def back_main(query: CallbackQuery, state: FSMContext):
    await show_interfaces(query.message, state)
    await state.update_data(peers_cache=[])
    await query.answer()


def _bottom_menu(iface: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="peer_add"),
            InlineKeyboardButton(text="üîÅ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh:{iface}")
        ],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])