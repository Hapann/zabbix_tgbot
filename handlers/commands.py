from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from database.db import Database
from logger.logger import logger
from utils.messages import format_incident_message
from utils.keyboards import get_incident_keyboard
from globals import GROUP_ID, TOPIC_ID
from datetime import datetime

router = Router()

def log_command(message: Message, command: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã"""
    user_id = message.from_user.id
    username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) - –£—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {command}")

@router.message(Command(commands=["help"]))
async def help_handler(message: Message):
    log_command(message, "/help")
    await message.answer(
        "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–ª–µ—Ä—Ç—ã –∏–∑ Zabbix –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏.\n\n"
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/rules - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º\n"
        "/active - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"
    )

@router.message(Command(commands=["rules"]))
async def rules_handler(message: Message):
    log_command(message, "/rules")
    await message.answer(
        "üìú –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:\n\n"
        "1. –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ —Ä–∞–±–æ—Ç—É –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.\n"
        "2. –ü—Ä–∏ –≤–∑—è—Ç–∏–∏ –≤ —Ä–∞–±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n"
        "3. –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç–∞–∫–∂–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n"
        "4. –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
        "5. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–∂–µ—Ç –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç –¥—Ä—É–≥–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.\n"
        "6. –ó–∞–∫—Ä—ã—Ç—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
    )

@router.message(Command(commands=["stats"]))
async def stats_handler(message: Message, db: Database):
    log_command(message, "/stats")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with db.pool.acquire() as conn:
            total = await conn.fetchval("SELECT COUNT(*) FROM incidents")
            open_count = await conn.fetchval("SELECT COUNT(*) FROM incidents WHERE status = 'open'")
            in_progress = await conn.fetchval("SELECT COUNT(*) FROM incidents WHERE status = 'in_progress'")
            closed = await conn.fetchval("SELECT COUNT(*) FROM incidents WHERE status = 'closed'")
            rejected = await conn.fetchval("SELECT COUNT(*) FROM incidents WHERE status = 'rejected'")
        
        response = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {total}\n"
            f"‚Ä¢ –û—Ç–∫—Ä—ã—Ç–æ: {open_count}\n"
            f"‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {in_progress}\n"
            f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç–æ: {closed}\n"
            f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected}"
        )
        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command(commands=["active"]))
async def active_incidents_handler(message: Message, db: Database):
    log_command(message, "/active")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
        async with db.pool.acquire() as conn:
            incidents = await conn.fetch(
                "SELECT * FROM incidents WHERE status IN ('open', 'in_progress') ORDER BY created_at DESC"
            )
        
        if not incidents:
            await message.answer("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.")
            return
            
        response = "üö® –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã:\n\n"
        for incident in incidents:
            incident_dict = dict(incident)
            response += f"‚Ä¢ #{incident_dict['id']} - {incident_dict['event']} ({incident_dict['status']})\n"
        
        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")