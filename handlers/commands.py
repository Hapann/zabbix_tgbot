from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.db import Database
from globals import GROUP_ID, TOPIC_ID
from logger.logger import logger

router = Router()

def log_command(message: Message, command: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã"""
    user_id = message.from_user.id
    username = f"@{message.from_user.username}" if message.from_user.username else "–±–µ–∑ username"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) - –£—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {command}")

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
def incident_buttons(incident_id: int, status: str):
    if status == "new":
        buttons = [
            [InlineKeyboardButton(text="–í —Ä–∞–±–æ—Ç—É", callback_data=f"take_{incident_id}"),
             InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{incident_id}")]
        ]
    elif status == "in_progress":
        buttons = [
            [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{incident_id}")]
        ]
    else:
        buttons = []
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(Command(commands=["help"]))
async def help_handler(message: Message):
    log_command(message, "/help")
    await message.answer(
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–ª–µ—Ä—Ç—ã –∏–∑ Zabbix –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/rules - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º"
    )

@router.message(Command(commands=["rules"]))
async def rules_handler(message: Message):
    log_command(message, "/rules")
    await message.answer(
        "–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:\n"
        "1. –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ —Ä–∞–±–æ—Ç—É –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.\n"
        "2. –ü—Ä–∏ –≤–∑—è—Ç–∏–∏ –≤ —Ä–∞–±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏.\n"
        "3. –ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç–∞–∫–∂–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n"
        "4. –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –≤ –±–∞–∑–µ."
    )

@router.message(Command(commands=["stats"]))
async def stats_handler(message: Message, db: Database):
    log_command(message, "/stats")
    try:
        stats = await db.get_incident_stats()
        response = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {stats['total']}\n"
            f"‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}\n"
            f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç–æ: {stats['closed']}\n"
            f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}"
        )
        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def send_incident_to_group(bot, incident_id: int, event: str, node: str, 
                               trigger: str, status: str, severity: str, details: str):
    text = (
        f"üö® <b>–ù–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç #{incident_id}</b>\n"
        f"<b>–°–æ–±—ã—Ç–∏–µ:</b> {event}\n"
        f"<b>–ù–∞ —É–∑–ª–µ:</b> {node}\n"
        f"<b>–¢—Ä–∏–≥–≥–µ—Ä:</b> {trigger}\n"
        f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {status}\n"
        f"<b>–£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏:</b> {severity}\n"
        f"<b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</b> {details}\n"
        f"<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    
    keyboard = incident_buttons(incident_id, "new")
    
    try:
        await bot.send_message(
            chat_id=GROUP_ID,
            text=text,
            reply_markup=keyboard,
            message_thread_id=TOPIC_ID,
            parse_mode="HTML"
        )
        logger.info(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç #{incident_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ #{incident_id}: {e}")