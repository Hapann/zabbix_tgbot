from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import Database  # –£–±—Ä–∞–ª–∏ create_incident
from logger.logger import logger
from globals import GROUP_ID, TOPIC_ID
from datetime import datetime

router = Router()

class IncidentStates(StatesGroup):
    waiting_for_comment = State()

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
@router.callback_query(F.data.startswith("status_"))
async def change_incident_status(callback: CallbackQuery, state: FSMContext, db: Database):
    action, incident_id, new_status = callback.data.split("_")
    user = callback.from_user.username or callback.from_user.full_name
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.update_incident_status(
            incident_id=int(incident_id),
            status=new_status
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        status_text = {
            "open": "–æ—Ç–∫—Ä—ã—Ç",
            "in_progress": "–≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É",
            "rejected": "–æ—Ç–∫–ª–æ–Ω–µ–Ω",
            "closed": "–∑–∞–∫—Ä—ã—Ç"
        }.get(new_status, new_status)
        
        emoji = {
            "open": "üîì",
            "in_progress": "üõ†Ô∏è",
            "rejected": "‚ùå",
            "closed": "üîí"
        }.get(new_status, "‚ÑπÔ∏è")
        
        text = (
            f"{emoji} <b>–ò–Ω—Ü–∏–¥–µ–Ω—Ç #{incident_id} {status_text}</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await callback.bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=TOPIC_ID,
            text=text,
            parse_mode="HTML"
        )
        
        await callback.answer(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_text}")
        await callback.message.edit_reply_markup(
            reply_markup=generate_incident_buttons(int(incident_id), new_status)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ #{incident_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ (–≤—ã–Ω–µ—Å–µ–Ω–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
def generate_incident_buttons(incident_id: int, current_status: str = "open") -> InlineKeyboardMarkup:
    buttons = []
    
    if current_status == "open":
        buttons.append([
            InlineKeyboardButton(text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{incident_id}"),
            InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{incident_id}")
        ])
    elif current_status == "in_progress":
        buttons.append([
            InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{incident_id}"),
            InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å –≤ –æ—Ç–∫—Ä—ã—Ç—ã–µ", callback_data=f"status_{incident_id}_open")
        ])
    elif current_status == "rejected":
        buttons.append([
            InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å –≤ –æ—Ç–∫—Ä—ã—Ç—ã–µ", callback_data=f"status_{incident_id}_open")
        ])
    elif current_status == "closed":
        buttons.append([
            InlineKeyboardButton(text="–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å", callback_data=f"status_{incident_id}_open")
        ])
    
    buttons.append([
        InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤", callback_data=f"history_{incident_id}")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ create_incident
# ... [–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ take_in_work, reject_incident, close_incident] ...

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
@router.message(StateFilter(IncidentStates.waiting_for_comment))
async def process_comment(message: Message, state: FSMContext, db: Database):
    data = await state.get_data()
    action = data.get("action")
    incident_id = data.get("incident_id")
    original_message_id = data.get("original_message_id")
    user_id = data.get("user_id")
    username = data.get("username")
    comment = message.text.strip()

    if not comment:
        await message.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
        return

    try:
        new_status = ""
        emoji = ""
        action_text = ""
        
        if action == "take":
            new_status = "in_progress"
            emoji = "üõ†Ô∏è"
            action_text = "–≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É"
            await db.update_incident(
                incident_id=incident_id,
                status=new_status,
                assigned_to=f"{username} (ID: {user_id})",
                comment=comment
            )
            
        elif action == "reject":
            new_status = "rejected"
            emoji = "‚ùå"
            action_text = "–æ—Ç–∫–ª–æ–Ω–µ–Ω"
            await db.update_incident(
                incident_id=incident_id,
                status=new_status,
                closed_by=f"{username} (ID: {user_id})",
                comment=comment
            )
            
        elif action == "close":
            new_status = "closed"
            emoji = "üîí"
            action_text = "–∑–∞–∫—Ä—ã—Ç"
            await db.update_incident(
                incident_id=incident_id,
                status=new_status,
                closed_by=f"{username} (ID: {user_id})",
                comment=comment
            )
        
        text = (
            f"{emoji} <b>–ò–Ω—Ü–∏–¥–µ–Ω—Ç #{incident_id} {action_text}</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.bot.edit_message_reply_markup(
            chat_id=GROUP_ID,
            message_id=original_message_id,
            message_thread_id=TOPIC_ID,
            reply_markup=generate_incident_buttons(incident_id, new_status)
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=TOPIC_ID,
            text=text,
            parse_mode="HTML"
        )
        
        await message.answer("‚úîÔ∏è –î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        logger.info(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç #{incident_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: –¥–µ–π—Å—Ç–≤–∏–µ={action}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={username}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ #{incident_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    finally:
        await state.clear()