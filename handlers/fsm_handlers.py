from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import Database
from logger.logger import logger
from globals import GROUP_ID, TOPIC_ID
from datetime import datetime
from utils.messages import format_incident_message
from utils.keyboards import get_incident_keyboard

router = Router()

class IncidentStates(StatesGroup):
    waiting_for_comment = State()
    waiting_for_reassign = State()

@router.callback_query(F.data.startswith("take_"))
async def take_in_work(callback: CallbackQuery, state: FSMContext, db: Database):
    incident_id = int(callback.data.split("_")[1])
    user = callback.from_user.username or callback.from_user.full_name
    user_id = callback.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} (ID: {user_id}) –Ω–∞—á–∞–ª –≤–∑—è—Ç–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ #{incident_id} –≤ —Ä–∞–±–æ—Ç—É")
    
    await state.update_data(
        action="take", 
        incident_id=incident_id,
        original_message_id=callback.message.message_id,
        user_id=user_id,
        username=user
    )
    await callback.message.answer("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –≤–∑—è—Ç–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É:")
    await IncidentStates.waiting_for_comment.set()
    await callback.answer()

@router.callback_query(F.data.startswith("reject_"))
async def reject_incident(callback: CallbackQuery, state: FSMContext, db: Database):
    incident_id = int(callback.data.split("_")[1])
    user = callback.from_user.username or callback.from_user.full_name
    user_id = callback.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} (ID: {user_id}) –Ω–∞—á–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ #{incident_id}")
    
    await state.update_data(
        action="reject", 
        incident_id=incident_id,
        original_message_id=callback.message.message_id,
        user_id=user_id,
        username=user
    )
    await callback.message.answer("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:")
    await IncidentStates.waiting_for_comment.set()
    await callback.answer()

@router.callback_query(F.data.startswith("close_"))
async def close_incident(callback: CallbackQuery, state: FSMContext, db: Database):
    incident_id = int(callback.data.split("_")[1])
    user = callback.from_user.username or callback.from_user.full_name
    user_id = callback.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} (ID: {user_id}) –Ω–∞—á–∞–ª –∑–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ #{incident_id}")
    
    await state.update_data(
        action="close", 
        incident_id=incident_id,
        original_message_id=callback.message.message_id,
        user_id=user_id,
        username=user
    )
    await callback.message.answer("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:")
    await IncidentStates.waiting_for_comment.set()
    await callback.answer()

@router.callback_query(F.data.startswith("reassign_"))
async def reassign_incident(callback: CallbackQuery, state: FSMContext, db: Database):
    incident_id = int(callback.data.split("_")[1])
    user = callback.from_user.username or callback.from_user.full_name
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞—á–∞–ª –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ #{incident_id}")
    
    await state.update_data(
        action="reassign", 
        incident_id=incident_id,
        original_message_id=callback.message.message_id
    )
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ –º–µ–Ω—è", callback_data=f"selfassign_{incident_id}")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_reassign")]
    ])
    
    await callback.message.answer(
        "üë• –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ @username):",
        reply_markup=keyboard
    )
    await IncidentStates.waiting_for_reassign.set()
    await callback.answer()

@router.callback_query(F.data.startswith("selfassign_"))
async def self_assign_incident(callback: CallbackQuery, state: FSMContext, db: Database):
    incident_id = int(callback.data.split("_")[1])
    user = callback.from_user.username or callback.from_user.full_name
    user_id = callback.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} (ID: {user_id}) –Ω–∞–∑–Ω–∞—á–∏–ª —Å–µ–±—è –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç #{incident_id}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
    await db.update_incident(
        incident_id=incident_id,
        assigned_to=f"{user} (ID: {user_id})"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    incident = await db.get_incident(incident_id)
    text = format_incident_message(incident)
    keyboard = await get_incident_keyboard(incident_id, db)
    
    await callback.bot.edit_message_text(
        chat_id=GROUP_ID,
        message_id=callback.message.message_id - 1,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ 1 –≤—ã—à–µ
        text=text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await callback.message.answer(f"‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç #{incident_id}")
    await state.clear()
    await callback.answer()

@router.message(StateFilter(IncidentStates.waiting_for_reassign))
async def process_reassign(message: Message, state: FSMContext, db: Database):
    data = await state.get_data()
    incident_id = data.get("incident_id")
    username = message.text.strip()
    
    if not username.startswith("@"):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username")
        return
    
    logger.info(f"–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ #{incident_id} –Ω–∞ {username}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
    await db.update_incident(
        incident_id=incident_id,
        assigned_to=username
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    incident = await db.get_incident(incident_id)
    text = format_incident_message(incident)
    keyboard = await get_incident_keyboard(incident_id, db)
    
    await message.bot.edit_message_text(
        chat_id=GROUP_ID,
        message_id=data.get("original_message_id"),
        text=text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await message.answer(f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç #{incident_id} –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ {username}")
    await state.clear()

@router.message(StateFilter(IncidentStates.waiting_for_comment))
async def process_comment(message: Message, state: FSMContext, db: Database):
    data = await state.get_data()
    action = data.get("action")
    incident_id = data.get("incident_id")
    original_message_id = data.get("original_message_id")
    user_id = data.get("user_id")
    username = data.get("username")
    comment = message.text.strip()

    if not comment:
        await message.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
        return

    try:
        new_status = ""
        action_text = ""
        
        if action == "take":
            new_status = "in_progress"
            action_text = "–≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É"
            await db.update_incident(
                incident_id=incident_id,
                status=new_status,
                assigned_to=f"{username} (ID: {user_id})",
                comment=comment
            )
            
        elif action == "reject":
            new_status = "rejected"
            action_text = "–æ—Ç–∫–ª–æ–Ω–µ–Ω"
            await db.update_incident(
                incident_id=incident_id,
                status=new_status,
                closed_by=f"{username} (ID: {user_id})",
                closed_at=datetime.now(),
                comment=comment
            )
            
        elif action == "close":
            new_status = "closed"
            action_text = "–∑–∞–∫—Ä—ã—Ç"
            await db.update_incident(
                incident_id=incident_id,
                status=new_status,
                closed_by=f"{username} (ID: {user_id})",
                closed_at=datetime.now(),
                comment=comment
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        incident = await db.get_incident(incident_id)
        text = format_incident_message(incident)
        keyboard = await get_incident_keyboard(incident_id, db)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.bot.edit_message_text(
            chat_id=GROUP_ID,
            message_id=original_message_id,
            text=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è
        await message.answer(f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç #{incident_id} {action_text}!")
        logger.info(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç #{incident_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: –¥–µ–π—Å—Ç–≤–∏–µ={action}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={username}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ #{incident_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    finally:
        await state.clear()