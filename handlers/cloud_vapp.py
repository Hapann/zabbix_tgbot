#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import math
import requests
import time
import xml.etree.ElementTree as ET
import pandas as pd
import io
import textwrap
from dotenv import load_dotenv
from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from logger.logger import logger
from datetime import datetime, timedelta


# ------------------------------------------------------------------------------
# ROUTER
# ------------------------------------------------------------------------------
router = Router(name=__name__)
requests.packages.urllib3.disable_warnings()
load_dotenv()


# --- –∫—ç—à ---
TOKEN_CACHE = {"token": None, "time": None}
VAPP_CACHE = {"data": None, "time": None}

TOKEN_TTL = 55 * 60       # 55 –º–∏–Ω—É—Ç
VAPP_TTL = 5 * 60         # 5 –º–∏–Ω—É—Ç (—á–µ—Ä–µ–∑ 5 –º–∏–Ω –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫)


# ------------------------------------------------------------------------------
# CONFIGURATION
# ------------------------------------------------------------------------------
CONFIG = {
    "base_url": os.getenv("base_url"),
    "tenant": os.getenv("tenant"),
    "refresh_token": os.getenv("refresh_token"),
    "vdc_id": os.getenv("vdc_id"),
    "storage_gold_urn": os.getenv("storage_gold_urn"),
    "storage_bronze_urn": os.getenv("storage_bronze_urn"),
}
API_VERSION = "40.0.0-alpha"


# ------------------------------------------------------------------------------
# CLOUD UTILS
# ------------------------------------------------------------------------------
def get_bearer_token(cfg: dict) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞ Bearer‚Äë—Ç–æ–∫–µ–Ω"""
    # –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏ –æ–Ω –Ω–µ —É—Å—Ç–∞—Ä–µ–ª
    if TOKEN_CACHE["token"] and TOKEN_CACHE["time"]:
        elapsed = time.time() - TOKEN_CACHE["time"]
        if elapsed < TOKEN_TTL:
            logger.debug("‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Bearer‚Äë—Ç–æ–∫–µ–Ω")
            return TOKEN_CACHE["token"]

    # –∏–Ω–∞—á–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
    url = f"{cfg['base_url']}/oauth/tenant/{cfg['tenant']}/token"
    headers = {"Accept": "application/json", "Content-Type": "application/x-www-form-urlencoded"}
    data = {"grant_type": "refresh_token", "refresh_token": cfg["refresh_token"]}
    try:
        r = requests.post(url, headers=headers, data=data, verify=False, timeout=20)
        r.raise_for_status()
        token = r.json().get("access_token")
        if not token:
            raise RuntimeError("–ü—É—Å—Ç–æ–π access_token")
        TOKEN_CACHE["token"] = token
        TOKEN_CACHE["time"] = time.time()
        logger.info("‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω Bearer‚Äë—Ç–æ–∫–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤‚ÄØ–∫—ç—à")
        return token
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        raise


def get_vapps(cfg, token, force_update=False) -> pd.DataFrame:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ vApp —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ —Ü–≤–µ—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (–¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã).
    """
    start = time.time()
    logger.info("üöÄ‚ÄØ–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ vApp (—Ä–µ—Å—É—Ä—Å—ã + —Å—Ç–∞—Ç—É—Å—ã)")

    if (
        not force_update
        and VAPP_CACHE["data"] is not None
        and VAPP_CACHE["time"]
        and (time.time() - VAPP_CACHE["time"] < VAPP_TTL)
    ):
        logger.info("‚ôªÔ∏è‚ÄØ–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à")
        return VAPP_CACHE["data"]

    try:
        params = {
            "type": "vApp", "format": "records",
            "page": 1, "pageSize": 200,
            "filterEncoded": "true",
            "filter": f"(vdc=={cfg['vdc_id']})"
        }
        headers = {
            "Accept": "application/*+xml;version=40.0.0-alpha",
            "Authorization": f"Bearer {token}"
        }

        r = requests.get(f"{cfg['base_url']}/api/query",
                         headers=headers, params=params, verify=False)
        r.raise_for_status()
        root = ET.fromstring(r.text)
        ns = {"v": "http://www.vmware.com/vcloud/v1.5"}

        data = []
        for rec in root.findall("v:VAppRecord", ns):
            name = rec.attrib.get("name", "‚Äî")

            # —Å–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—É—Å
            raw_state = rec.attrib.get("status", "").upper().strip()
            logger.debug(f"vApp‚ÄØ{name}‚ÄØ‚Üí‚ÄØstatus='{raw_state}'")

            # –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç
            if "POWERED_ON" in raw_state or raw_state == "ON":
                indicator = "üü¢"
            elif "POWERED_OFF" in raw_state or raw_state == "OFF":
                indicator = "üî¥"
            elif "MIX" in raw_state or "RESOLVED" in raw_state or "PART" in raw_state:
                indicator = "üü°"
            else:
                indicator = "‚ö™"

            href = rec.attrib.get("href", "")
            cpus = int(rec.attrib.get("numberOfCpus", 0))
            ram_mb = int(rec.attrib.get("memoryAllocationMB", 0))
            storage_mb = int(rec.attrib.get("totalStorageAllocatedMb",
                            int(rec.attrib.get("storageKB", 0)) / 1024))

            data.append({
                "–°—Ç–∞—Ç—É—Å": indicator,
                "–ò–º—è vApp": name,
                "vCPU": cpus,
                "RAM (–ì–ë)": ram_mb / 1024,
                "–î–∏—Å–∫ (–ì–ë)": storage_mb / 1024,
                "href": href
            })

        df = pd.DataFrame(data)
        VAPP_CACHE.update({"data": df, "time": time.time()})
        logger.info(f"‚úÖ‚ÄØ–ü–æ–ª—É—á–µ–Ω–æ‚ÄØ{len(df)}‚ÄØvApp,‚ÄØ{time.time()-start:.2f}s")
        return df

    except Exception as e:
        logger.exception(f"‚ùå‚ÄØ–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è vApp: {e}")
        return pd.DataFrame()


def get_storage_limits(cfg, token) -> float:
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –ª–∏–º–∏—Ç Storage (Bronze + Gold) —á–µ—Ä–µ–∑ CloudAPI consumers.
    """
    def collect_used(urn):
        page, total = 1, 0
        while True:
            url = (f"{cfg['base_url']}/cloudapi/1.0.0/orgVdcStoragePolicies/"
                   f"{urn}/consumers?page={page}&pageSize=25")
            headers = {
                "Accept": "application/json;version=39.1",
                "Authorization": f"Bearer {token}",
            }
            r = requests.get(url, headers=headers, verify=False)
            if not r.ok:
                break
            js = r.json()
            vals = js.get("values", [])
            total += sum(v.get("storageConsumedMb", 0) for v in vals)
            if page >= js.get("pageCount", 1):
                break
            page += 1
        return total

    try:
        used_bronze = collect_used(cfg["storage_bronze_urn"])
        used_gold = collect_used(cfg["storage_gold_urn"])

        # –ª–∏–º–∏—Ç—ã
        for urn_type in ("storage_gold_urn", "storage_bronze_urn"):
            url = f"{cfg['base_url']}/cloudapi/1.0.0/orgVdcStoragePolicies/{cfg[urn_type]}"
            hdr = {
                "Accept": "application/json;version=39.1",
                "Authorization": f"Bearer {token}",
            }
            r = requests.get(url, headers=hdr, verify=False)
            if not r.ok:
                raise RuntimeError(f"Storage {urn_type} {r.status_code}")
            limit_mb = r.json().get("storageLimitMb", 0)
            if urn_type.endswith("gold_urn"):
                gold_limit = limit_mb
            else:
                bronze_limit = limit_mb

        total_limit_tb = (gold_limit + bronze_limit) / 1024 / 1024
        total_used_tb = (used_gold + used_bronze) / 1024 / 1024
        logger.info(
            f"‚úÖ‚ÄØStorage‚ÄØ–ª–∏–º–∏—Ç:‚ÄØ{total_limit_tb:.2f}‚ÄØ–¢–ë, "
            f"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ‚ÄØ{total_used_tb:.2f}‚ÄØ–¢–ë"
        )
        return total_limit_tb
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è‚ÄØ–û—à–∏–±–∫–∞‚ÄØStorage‚ÄØ–ª–∏–º–∏—Ç–æ–≤:‚ÄØ{e}")
        return 0.0


# ------------------------------------------------------------------------------
# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ------------------------------------------------------------------------------
def keyboard_vapp_list(df: pd.DataFrame, page: int = 1, per_page: int = 12) -> types.InlineKeyboardMarkup:
    """3√ó4 —Å–ø–∏—Å–æ–∫ vApp —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π —Å—Ç–∞—Ç—É—Å–∞ + –ø–∞–≥–∏–Ω–∞—Ü–∏—è + –∫–Ω–æ–ø–∫–∏ –æ–±—â–∏—Ö –æ—Ç—á—ë—Ç–æ–≤."""
    total_pages = max(1, math.ceil(len(df) / per_page))
    page = max(1, min(page, total_pages))
    start, end = (page - 1) * per_page, page * per_page
    subset = df.iloc[start:end]

    kb = InlineKeyboardBuilder()

    # --- –æ—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞ 3√ó4 ---
    for _, row in subset.iterrows():
        name = row["–ò–º—è vApp"]
        status_icon = row.get("–°—Ç–∞—Ç—É—Å", "‚ö™")
        kb.button(text=f"{status_icon}‚ÄØ{name}", callback_data=f"vapp:{name}")
    kb.adjust(3)

    # --- –ø–∞–≥–∏–Ω–∞—Ü–∏—è ---
    if total_pages > 1:
        left_btn = types.InlineKeyboardButton(
            text="‚èÆÔ∏è", callback_data=f"page:{page-1}" if page > 1 else "noop")
        counter_btn = types.InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop")
        right_btn = types.InlineKeyboardButton(
            text="‚è≠Ô∏è", callback_data=f"page:{page+1}" if page < total_pages else "noop")
        kb.row(left_btn, counter_btn, right_btn)

    # --- –Ω–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ ---
    kb.row(
        # –ö–Ω–æ–ø–∫–∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö vApp –∏ –Ω–∞–∑–≤–∞–Ω–∞ PC info
        types.InlineKeyboardButton(text="üñ•‚ÄØPC‚ÄØinfo‚ÄØ(–≤—Å–µ‚ÄØvApp)", callback_data="vapp:stats"),
    )
    kb.row(
        types.InlineKeyboardButton(text="üìÑ‚ÄØCSV‚ÄØ(–≤—Å–µ‚ÄØvApp)", callback_data="allvapp_csv"),
        types.InlineKeyboardButton(text="üì±‚ÄØMobile‚ÄØinfo‚ÄØ(–≤—Å–µ‚ÄØvApp)", callback_data="allvapp_mobile"),
    )

    return kb.as_markup()

def keyboard_vapp_detail(name: str) -> types.InlineKeyboardMarkup:
    """–ö–∞—Ä—Ç–æ—á–∫–∞ vApp: –∏–Ω—Ñ–æ‚Äë—Ä–µ–∂–∏–º—ã + —ç–∫—Å–ø–æ—Ä—Ç"""
    kb = InlineKeyboardBuilder()
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è‚ÄØ–ù–∞–∑–∞–¥", callback_data="back:vapp_list"))
    kb.row(
        types.InlineKeyboardButton(text="üñ•‚ÄØPC‚ÄØinfo", callback_data=f"vappinfo_pc:{name}"),
        types.InlineKeyboardButton(text="üì±‚ÄØMobile‚ÄØinfo", callback_data=f"vappinfo_mobile:{name}")
    )
    kb.row(types.InlineKeyboardButton(text="üìÑ‚ÄØCSV‚ÄØ—Ñ–∞–π–ª", callback_data=f"vappinfo_csv:{name}"))
    return kb.as_markup()



def summarize_all_vapps(cfg, token) -> str:
    """
    –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º vApp.
    """
    try:
        start = time.time()
        logger.info("üìä‚ÄØ–†–∞—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏‚ÄØ–ø–æ‚ÄØ–≤—Å–µ–º‚ÄØvApp")

        # --- –ª–∏–º–∏—Ç—ã CPU/RAM ---
        vdc_url = f"{cfg['base_url']}/api/vdc/{cfg['vdc_id']}"
        hdrs = {"Accept": "application/*+xml;version=39.1",
                "Authorization": f"Bearer {token}"}
        r = requests.get(vdc_url, headers=hdrs, verify=False)
        r.raise_for_status()
        ns = {"v": "http://www.vmware.com/vcloud/v1.5"}
        root = ET.fromstring(r.text)
        cpu_vcpu = int(root.find(".//v:Cpu/v:Allocated", ns).text) / 1000 / 1.73
        ram_gb = int(root.find(".//v:Memory/v:Allocated", ns).text) / 1024

        # --- storage limit & usage (CloudAPI /consumers)
        def get_storage_totals():
            heads = {"Accept": "application/json;version=39.1",
                     "Authorization": f"Bearer {token}"}
            total_limit, total_used = 0, 0
            for urn in (cfg["storage_gold_urn"], cfg["storage_bronze_urn"]):
                base = cfg["base_url"]
                limit = requests.get(f"{base}/cloudapi/1.0.0/orgVdcStoragePolicies/{urn}",
                                     headers=heads, verify=False).json().get("storageLimitMb", 0)
                page, used_sum = 1, 0
                while True:
                    url = f"{base}/cloudapi/1.0.0/orgVdcStoragePolicies/{urn}/consumers?page={page}&pageSize=25"
                    resp = requests.get(url, headers=heads, verify=False)
                    if not resp.ok:
                        break
                    js = resp.json()
                    used_sum += sum(v.get("storageConsumedMb", 0) for v in js.get("values", []))
                    if page >= js.get("pageCount", 1):
                        break
                    page += 1
                total_limit += limit
                total_used += used_sum
            return total_limit / 1024 / 1024, total_used / 1024 / 1024  # –≤ –¢–ë

        storage_tb, used_tb = get_storage_totals()
        logger.info(f"‚úÖ‚ÄØStorage‚ÄØ–ª–∏–º–∏—Ç‚ÄØ{storage_tb:.2f}‚ÄØ–¢–ë‚ÄØ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ‚ÄØ{used_tb:.2f}‚ÄØ–¢–ë")
        total_storage_gb = storage_tb * 1024 or 1  # –¥–µ–ª–∏—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ >0

        # --- —Ç–∞–±–ª–∏—Ü–∞ vApp
        df = get_vapps(cfg, token, force_update=True)
        if df.empty:
            return "‚ö†Ô∏è‚ÄØ–ù–µ—Ç‚ÄØ–¥–∞–Ω–Ω—ã—Ö‚ÄØvApp."

        df["vCPU %"] = df["vCPU"] / cpu_vcpu * 100
        df["RAM %"] = df["RAM (–ì–ë)"] / ram_gb * 100
        df["–î–∏—Å–∫ %"] = df["–î–∏—Å–∫ (–ì–ë)"] / total_storage_gb * 100
        df = df.round({"RAM (–ì–ë)": 1, "–î–∏—Å–∫ (–ì–ë)": 1,
                       "vCPU %": 2, "RAM %": 2, "–î–∏—Å–∫ %": 2})

        total = {
            "–ò–º—è vApp": "–ò–¢–û–ì–û",
            "vCPU": df["vCPU"].sum(),
            "RAM (–ì–ë)": df["RAM (–ì–ë)"].sum(),
            "–î–∏—Å–∫ (–ì–ë)": df["–î–∏—Å–∫ (–ì–ë)"].sum(),
            "vCPU %": df["vCPU"].sum() / cpu_vcpu * 100,
            "RAM %": df["RAM (–ì–ë)"].sum() / ram_gb * 100,
            "–î–∏—Å–∫ %": df["–î–∏—Å–∫ (–ì–ë)"].sum() / total_storage_gb * 100
        }

        widths = [max(20, max(len(x) for x in df["–ò–º—è vApp"]) + 2),
                  8, 9, 9, 8, 10, 10]
        headers = ["–ò–º—è‚ÄØvApp", "vCPU", "vCPU‚ÄØ%", "RAM(–ì–ë)",
                   "RAM‚ÄØ%", "–î–∏—Å–∫(–ì–ë)", "–î–∏—Å–∫‚ÄØ%"]
        sep = "=" * (sum(widths) + len(widths) * 3 - 1)
        dash = "-" * (sum(widths) + len(widths) * 3 - 1)

        def fmt_row(values):
            parts = []
            for i, v in enumerate(values):
                t = str(v)
                parts.append(t.ljust(widths[i]) if i == 0 else t.center(widths[i]))
            return " | ".join(parts)

        lines = [sep, fmt_row(headers), dash]
        for _, r in df.iterrows():
            lines.append(fmt_row([
                r["–ò–º—è vApp"], int(r["vCPU"]),
                f"{r['vCPU %']:.1f}", f"{r['RAM (–ì–ë)']:.1f}",
                f"{r['RAM %']:.1f}", f"{r['–î–∏—Å–∫ (–ì–ë)']:.1f}", f"{r['–î–∏—Å–∫ %']:.1f}"]))
        lines += [sep, fmt_row([
            total["–ò–º—è vApp"], int(total["vCPU"]),
            f"{total['vCPU %']:.1f}", f"{total['RAM (–ì–ë)']:.1f}",
            f"{total['RAM %']:.1f}", f"{total['–î–∏—Å–∫ (–ì–ë)']:.1f}",
            f"{total['–î–∏—Å–∫ %']:.1f}"]), sep]

        text = "\n".join(lines)
        result = (
            f"<b>üìä‚ÄØ–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞‚ÄØ–≤—Å–µ—Ö‚ÄØvApp</b>\n"
            f"<pre>{text}</pre>"
        )
        logger.info(f"‚úÖ‚ÄØ–û—Ç—á—ë—Ç‚ÄØ–≥–æ—Ç–æ–≤‚ÄØ({len(df)}‚ÄØvApp)‚ÄØ–∑–∞‚ÄØ{time.time()-start:.2f}s")
        return result

    except Exception as e:
        logger.exception(f"‚ùå‚ÄØ–û—à–∏–±–∫–∞‚ÄØ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è‚ÄØ—Å–≤–æ–¥–Ω–æ–π‚ÄØ—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:‚ÄØ{e}")
        return "‚ùå‚ÄØ–û—à–∏–±–∫–∞‚ÄØ–ø—Ä–∏‚ÄØ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏‚ÄØ—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏‚ÄØvApp."



def describe_single_vapp(cfg, token, vapp_name: str) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ vApp.
    –ï—Å–ª–∏ –í–ú <= 10 ‚Äî —Ç–∞–±–ª–∏—Ü–∞; –µ—Å–ª–∏ –±–æ–ª—å—à–µ ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
    """
    try:
        # --- –∏—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ vApp ---
        df = get_vapps(cfg, token)
        row = df[df["–ò–º—è vApp"] == vapp_name]
        if row.empty:
            return f"‚ö†Ô∏è‚ÄØvApp‚ÄØ<b>{vapp_name}</b>‚ÄØ–Ω–µ –Ω–∞–π–¥–µ–Ω."

        href = row.iloc[0]["href"]
        vapp_id = href.split("vapp-")[-1]
        url = f"{cfg['base_url']}/api/vApp/vapp-{vapp_id}"
        headers = {
            "Accept": "application/*+xml;version=40.0.0-alpha",
            "Authorization": f"Bearer {token}"
        }

        r = requests.get(url, headers=headers, verify=False, timeout=30)
        r.raise_for_status()
        xml_text = r.text
        ns = {"v": "http://www.vmware.com/vcloud/v1.5"}
        root = ET.fromstring(xml_text)
        vapp_name_xml = root.attrib.get("name", "?")
        vms = root.findall("v:Children/v:Vm", ns)
        if not vms:
            return f"‚ö†Ô∏è‚ÄØ–í‚ÄØvApp‚ÄØ<b>{vapp_name_xml}</b>‚ÄØ–Ω–µ—Ç‚ÄØ–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö‚ÄØ–º–∞—à–∏–Ω."

        # --- —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ---
        table_data = []
        total_cpu = total_ram = total_disk = total_snap_size = 0
        for vm in vms:
            name = vm.attrib.get("name", "-")
            storage = vm.find("v:StorageProfile", ns)
            storage_name = storage.attrib.get("name", "-") if storage is not None else "-"

            spec = vm.find("v:VmSpecSection", ns)
            cpu = ram_gb = disk_gb = 0
            if spec is not None:
                numcpu = spec.find("v:NumCpus", ns)
                if numcpu is not None and numcpu.text:
                    cpu = int(numcpu.text)
                mem = spec.find("v:MemoryResourceMb/v:Configured", ns)
                if mem is not None and mem.text:
                    ram_gb = round(int(mem.text) / 1024, 1)
                for d in spec.findall("v:DiskSection/v:DiskSettings/v:SizeMb", ns):
                    if d.text and d.text.isdigit():
                        disk_gb += int(d.text) / 1024

            nc = vm.find("v:NetworkConnectionSection/v:NetworkConnection", ns)
            net_name = nc.attrib.get("network", "-") if nc is not None else "-"
            ip_el = nc.find("v:IpAddress", ns) if nc is not None else None
            ip_addr = ip_el.text if ip_el is not None else "-"

            snap_section = vm.find("v:SnapshotSection", ns)
            snap_count = 0
            snap_size_gb = 0.0
            if snap_section is not None:
                for s in snap_section.findall("v:Snapshot", ns):
                    snap_count += 1
                    try:
                        snap_size_gb += int(s.attrib.get("size", "0")) / 1024**3
                    except ValueError:
                        pass

            total_cpu += cpu
            total_ram += ram_gb
            total_disk += disk_gb
            total_snap_size += snap_size_gb

            table_data.append([name, net_name, ip_addr, cpu, ram_gb,
                               round(disk_gb, 1), storage_name, snap_count, round(snap_size_gb, 1)])

        # --- –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ ---
        if len(table_data) <= 10:
            # —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ü–ö
            header = ["–ò–º—è‚ÄØ–í–ú", "Network", "IP", "CPU", "RAM", "Disk", "Storage", "Snaps", "SnapSize"]
            col_widths = [22, 18, 14, 4, 6, 7, 8, 5, 10]

            def fmt_row(cols):
                parts = []
                for i, w in enumerate(col_widths):
                    val = str(cols[i])
                    parts.append(val.ljust(w) if i < 3 else val.center(w))
                return " | ".join(parts)

            sep_line = "-" * (sum(col_widths) + len(col_widths)*3 - 1)
            lines = [fmt_row(header), sep_line]
            for row in table_data:
                lines.append(fmt_row(row))
            lines.append(sep_line)
            lines.append(
                fmt_row([
                    "–ò–¢–û–ì–û", f"VMs:{len(table_data)}", "",
                    total_cpu, f"{total_ram:.1f}", f"{total_disk:.1f}",
                    "", "", f"{total_snap_size:.1f}",
                ])
            )
            table = "\n".join(lines)
            return f"<b>üì¶‚ÄØvApp:‚ÄØ{vapp_name_xml}</b>\n<pre>{table}</pre>"

        else:
            # –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            lines = [f"<b>üì¶‚ÄØvApp:‚ÄØ{vapp_name_xml}</b>", "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"]
            for name, net, ip, cpu, ram, disk, storage, snaps, snap_size in table_data:
                lines.append(
                    f"<b>{name}</b>\n"
                    f"‚Ä¢‚ÄØCPU:‚ÄØ{cpu},‚ÄØRAM:‚ÄØ{ram}‚ÄØGB,‚ÄØDisk:‚ÄØ{disk}‚ÄØGB\n"
                    f"‚Ä¢‚ÄØNet:‚ÄØ{net}‚ÄØ({ip})\n"
                    f"‚Ä¢‚ÄØStorage:‚ÄØ{storage},‚ÄØSnaps:‚ÄØ{snaps}‚ÄØ({snap_size}‚ÄØGB)\n"
                    "‚Äî‚Äî‚Äî‚Äî‚Äî"
                )
            lines.append(
                f"<b>–ò–¢–û–ì–û:</b>‚ÄØ{len(table_data)}‚ÄØVM‚†Ä‚îÇ‚ÄØCPU‚ÄØ{total_cpu}‚ÄØ‚îÇ‚ÄØRAM‚ÄØ{total_ram:.1f}‚ÄØGB‚ÄØ‚îÇ‚ÄØDisk‚ÄØ{total_disk:.1f}‚ÄØGB‚ÄØ‚îÇ‚ÄØSnaps‚ÄØ{total_snap_size:.1f}‚ÄØGB"
            )
            return "\n".join(lines)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏‚ÄØvApp‚ÄØ{vapp_name}:‚ÄØ{e}")
        return f"‚ùå‚ÄØ–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏‚ÄØ–æ‚ÄØ<b>{vapp_name}</b>."


def describe_single_vapp_pc(cfg, token, vapp_name: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —à–∏—Ä–æ–∫—É—é —Ç–∞–±–ª–∏—Ü—É –í–ú –≤–Ω—É—Ç—Ä–∏ vApp (–ü–ö‚Äë–≤–∏–¥).
    –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    start_ts = time.time()
    logger.info(f"üì•‚ÄØ–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã‚ÄØvApp '{vapp_name}'")

    try:
        df = get_vapps(cfg, token)
        row = df[df["–ò–º—è vApp"] == vapp_name]
        if row.empty:
            logger.warning(f"‚ö†Ô∏è‚ÄØvApp '{vapp_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ vApp.")
            return f"‚ö†Ô∏è‚ÄØvApp‚ÄØ<b>{vapp_name}</b>‚ÄØ–Ω–µ‚ÄØ–Ω–∞–π–¥–µ–Ω."

        href = row.iloc[0]["href"]
        vapp_id = href.split("vapp-")[-1]
        url = f"{cfg['base_url']}/api/vApp/vapp-{vapp_id}"
        headers = {"Accept": "application/*+xml;version=40.0.0-alpha",
                   "Authorization": f"Bearer {token}"}

        r = requests.get(url, headers=headers, verify=False, timeout=30)
        r.raise_for_status()
        xml_text = r.text

        ns = {"v": "http://www.vmware.com/vcloud/v1.5"}
        root = ET.fromstring(xml_text)
        vapp_name_xml = root.attrib.get("name", "?")
        vms = root.findall("v:Children/v:Vm", ns)

        if not vms:
            logger.info(f"‚ö†Ô∏è‚ÄØvApp '{vapp_name}' –ø—É—Å—Ç (–Ω–µ—Ç –í–ú)")
            return f"‚ö†Ô∏è‚ÄØ–í‚ÄØvApp‚ÄØ<b>{vapp_name_xml}</b>‚ÄØ–Ω–µ—Ç‚ÄØ–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö‚ÄØ–º–∞—à–∏–Ω."

        table_data = []
        total_cpu = total_ram = total_disk = total_snap = 0

        for vm in vms:
            name = vm.attrib.get("name", "-")
            storage = vm.find("v:StorageProfile", ns)
            storage_name = storage.attrib.get("name", "-") if storage is not None else "-"
            spec = vm.find("v:VmSpecSection", ns)
            cpu = ram_gb = disk_gb = 0
            if spec is not None:
                numcpu = spec.find("v:NumCpus", ns)
                if numcpu is not None and numcpu.text:
                    cpu = int(numcpu.text)
                mem = spec.find("v:MemoryResourceMb/v:Configured", ns)
                if mem is not None and mem.text:
                    ram_gb = round(int(mem.text)/1024, 1)
                for d in spec.findall("v:DiskSection/v:DiskSettings/v:SizeMb", ns):
                    if d.text and d.text.isdigit():
                        disk_gb += int(d.text)/1024

            nc = vm.find("v:NetworkConnectionSection/v:NetworkConnection", ns)
            net = nc.attrib.get("network", "-") if nc is not None else "-"
            ip_el = nc.find("v:IpAddress", ns) if nc is not None else None
            ip = ip_el.text if ip_el is not None else "-"

            snap_section = vm.find("v:SnapshotSection", ns)
            sn_count = 0
            sn_size = 0.0
            if snap_section is not None:
                for s in snap_section.findall("v:Snapshot", ns):
                    sn_count += 1
                    try:
                        sn_size += int(s.attrib.get("size", "0"))/1024**3
                    except ValueError:
                        pass

            total_cpu += cpu
            total_ram += ram_gb
            total_disk += disk_gb
            total_snap += sn_size

            table_data.append([
                name, net, ip, cpu, f"{ram_gb:.1f}", f"{disk_gb:.1f}",
                storage_name, sn_count, f"{sn_size:.1f}"
            ])

        # --- –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ---
        header = ["–ò–º—è‚ÄØ–í–ú", "Network", "IP‚ÄëAddress", "CPU", "RAM(GB)",
                  "Disk(GB)", "Storage", "Snaps", "Snap‚ÄØSize(GB)"]
        col_widths = [25, 25, 17, 4, 8, 9, 10, 5, 13]
        sep_line = "=" * (sum(col_widths) + len(col_widths)*3 - 1)
        dash_line = "-" * (sum(col_widths) + len(col_widths)*3 - 1)

        def fmt_row(cols, widths):
            parts = []
            for i, w in enumerate(widths):
                val = str(cols[i])
                parts.append(val.ljust(w) if i < 3 else val.center(w))
            return " | ".join(parts)

        lines = [sep_line, fmt_row(header, col_widths), dash_line]
        for row in table_data:
            lines.append(fmt_row(row, col_widths))
        lines.append(sep_line)
        lines.append(fmt_row([
            "–ò–¢–û–ì–û", f"VM‚ÄØcount:‚ÄØ{len(table_data)}", "",
            total_cpu, f"{total_ram:.1f}", f"{total_disk:.1f}", "",
            "", f"{total_snap:.1f}"
        ], col_widths))
        lines.append(sep_line)

        elapsed = time.time() - start_ts
        logger.info(
            f"‚úÖ‚ÄØ–û—Ç—á—ë—Ç –ø–æ‚ÄØvApp‚ÄØ'{vapp_name}'‚ÄØ–≥–æ—Ç–æ–≤:‚ÄØ{len(table_data)}‚ÄØ–í–ú, "
            f"{elapsed:.1f}s,‚ÄØCPU‚ÄØ{total_cpu},‚ÄØRAM‚ÄØ{total_ram:.1f}‚ÄØGB,‚ÄØDisk‚ÄØ{total_disk:.1f}‚ÄØGB."
        )

        table_text = "\n".join(lines)
        return f"<b>üì¶‚ÄØvApp:‚ÄØ{vapp_name_xml}</b>\n<pre>{table_text}</pre>"

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏‚ÄØvApp‚ÄØ{vapp_name}:‚ÄØ{e}")
        return f"‚ùå‚ÄØ–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏‚ÄØ–æ‚ÄØ<b>{vapp_name}</b>."


# ------------------------------------------------------------------------------
# HANDLERS
# ------------------------------------------------------------------------------
@router.message(Command("cloudvapp"))
async def cloudvapp_start(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /cloudvapp ‚Äî –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ vApp"""
    try:
        await message.answer("üîÑ‚ÄØ–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫‚ÄØvApp‚Ä¶")
        token = get_bearer_token(CONFIG)
        df = get_vapps(CONFIG, token)
        if df.empty:
            await message.answer("‚ö†Ô∏è‚ÄØvApp –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        await message.answer("üì¶‚ÄØ–í—ã–±–µ—Ä–∏‚ÄØvApp‚ÄØ–∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard_vapp_list(df))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /cloudvapp: {e}")
        await message.answer("‚ùå‚ÄØ–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞‚ÄØvApp.")


@router.callback_query(lambda c: c.data == "allvapp_csv")
async def callback_allvapp_csv(callback: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç CSV –ø–æ –≤—Å–µ–º vApp (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è + –ø—Ä–æ—Ü–µ–Ω—Ç—ã)."""
    import io
    logger.info("üì§‚ÄØ–ó–∞–ø—Ä–æ—à–µ–Ω‚ÄØ—ç–∫—Å–ø–æ—Ä—Ç‚ÄØCSV‚ÄØ–¥–ª—è‚ÄØ–≤—Å–µ—Ö‚ÄØvApp")
    try:
        token = get_bearer_token(CONFIG)
        df = get_vapps(CONFIG, token, force_update=True)
        if df.empty:
            await callback.answer("‚ö†Ô∏è‚ÄØ–ù–µ—Ç‚ÄØ–¥–∞–Ω–Ω—ã—Ö‚ÄØ–æ‚ÄØvApp.", show_alert=True)
            return

        # --- –∑–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ —Ç–µ–∫—Å—Ç
        emoji_to_text = {"üü¢": "POWERED_ON", "üî¥": "POWERED_OFF",
                         "üü°": "MIXED", "‚ö™": "UNKNOWN"}
        df["–°—Ç–∞—Ç—É—Å (—Ç–µ–∫—Å—Ç)"] = df["–°—Ç–∞—Ç—É—Å"].replace(emoji_to_text)  # –û–±—ã—á–Ω—ã–π –ø—Ä–æ–±–µ–ª

        # --- –ø–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã CPU/RAM/Storage, –∫–∞–∫ –≤ summarize_all_vapps
        url_vdc = f"{CONFIG['base_url']}/api/vdc/{CONFIG['vdc_id']}"
        hdrs = {"Accept": "application/*+xml;version=39.1",
                "Authorization": f"Bearer {token}"}
        r = requests.get(url_vdc, headers=hdrs, verify=False)
        ns = {"v": "http://www.vmware.com/vcloud/v1.5"}
        root = ET.fromstring(r.text)
        cpu_vcpu = int(root.find(".//v:Cpu/v:Allocated", ns).text) / 1000 / 1.73
        ram_gb = int(root.find(".//v:Memory/v:Allocated", ns).text) / 1024

        storage_tb = get_storage_limits(CONFIG, token)
        total_storage_gb = storage_tb * 1024 or 1

        # --- —Ä–∞—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        df["vCPU %"] = df["vCPU"] / cpu_vcpu * 100
        df["RAM %"] = df["RAM (–ì–ë)"] / ram_gb * 100
        df["–î–∏—Å–∫ %"] = df["–î–∏—Å–∫ (–ì–ë)"] / total_storage_gb * 100
        df = df.round({
            "RAM (–ì–ë)": 1, "–î–∏—Å–∫ (–ì–ë)": 1,
            "vCPU %": 2, "RAM %": 2, "–î–∏—Å–∫ %": 2,
        })

        # --- —Å—Ç—Ä–æ–∫–∞ –ò–¢–û–ì–û
        total_row = {
            "–°—Ç–∞—Ç—É—Å (—Ç–µ–∫—Å—Ç)": "",
            "–ò–º—è vApp": "–ò–¢–û–ì–û",  # –û–±—ã—á–Ω—ã–π –ø—Ä–æ–±–µ–ª
            "vCPU": df["vCPU"].sum(),
            "vCPU %": df["vCPU"].sum() / cpu_vcpu * 100,
            "RAM (–ì–ë)": df["RAM (–ì–ë)"].sum(),
            "RAM %": df["RAM (–ì–ë)"].sum() / ram_gb * 100,
            "–î–∏—Å–∫ (–ì–ë)": df["–î–∏—Å–∫ (–ì–ë)"].sum(),
            "–î–∏—Å–∫ %": df["–î–∏—Å–∫ (–ì–ë)"].sum() / total_storage_gb * 100,
        }
        df = pd.concat([df, pd.DataFrame([total_row])], ignore_index=True)

        # --- –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
        cols = ["–°—Ç–∞—Ç—É—Å (—Ç–µ–∫—Å—Ç)", "–ò–º—è vApp", "vCPU", "vCPU %",  # –í—Å–µ —Å –æ–±—ã—á–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
                "RAM (–ì–ë)", "RAM %", "–î–∏—Å–∫ (–ì–ë)", "–î–∏—Å–∫ %"]
        df = df[cols]

        buf = io.StringIO()
        df.to_csv(buf, index=False)
        buf.seek(0)

        await callback.message.answer_document(
            types.BufferedInputFile(
                buf.read().encode("utf-8"),
                filename="vApps_All_Info.csv"
            ),
            caption="üìÑ‚ÄØ–≠–∫—Å–ø–æ—Ä—Ç‚ÄØ–≤—Å–µ—Ö‚ÄØvApp‚ÄØ(–ø–æ–ª–Ω—ã–π‚ÄØ–æ—Ç—á—ë—Ç)",
            parse_mode="HTML"
        )
        logger.info(f"‚úÖ‚ÄØCSV‚ÄØ—ç–∫—Å–ø–æ—Ä—Ç‚ÄØ—É—Å–ø–µ—à–µ–Ω:‚ÄØ{len(df)-1}‚ÄØvApp‚ÄØ+‚ÄØ–∏—Ç–æ–≥–æ")
        await callback.answer()

    except Exception as e:
        logger.exception(f"‚ùå‚ÄØ–û—à–∏–±–∫–∞‚ÄØ—ç–∫—Å–ø–æ—Ä—Ç–∞‚ÄØ–≤—Å–µ—Ö‚ÄØvApp‚ÄØ–≤‚ÄØCSV:‚ÄØ{e}")
        await callback.answer("–û—à–∏–±–∫–∞‚ÄØCSV‚Äë—ç–∫—Å–ø–æ—Ä—Ç–∞.", show_alert=True)



@router.callback_query(lambda c: c.data.startswith("page:"))
async def callback_page(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ"""
    try:
        page = int(callback.data.split(":")[1])
        token = get_bearer_token(CONFIG)
        df = get_vapps(CONFIG, token)
        kb = keyboard_vapp_list(df, page)
        await callback.message.edit_reply_markup(reply_markup=kb)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("vapp:") and c.data != "vapp:stats")
async def callback_vapp(callback: types.CallbackQuery):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ‚ÄØvApp"""
    name = callback.data.split(":", 1)[1]
    text = f"üì¶‚ÄØvApp:‚ÄØ<b>{name}</b>"
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard_vapp_detail(name))
    await callback.answer()


@router.callback_query(lambda c: c.data == "vapp:stats")
async def callback_stats(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö vApp ‚Äî
    —Ç–∞–±–ª–∏—Ü–∞ + —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥".
    """
    try:
        token = get_bearer_token(CONFIG)
        text = summarize_all_vapps(CONFIG, token)

        # –æ–¥–Ω–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        kb = InlineKeyboardBuilder()
        kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è‚ÄØ–ù–∞–∑–∞–¥", callback_data="back:vapp_list"))

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=kb.as_markup()
        )
        await callback.answer()
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", show_alert=True)


@router.callback_query(lambda c: c.data == "allvapp_mobile")
async def callback_allvapp_mobile(callback: types.CallbackQuery):
    """
    üì± –ú–æ–±–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º vApp ‚Äî
    –∫—Ä–∞—Ç–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∫ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–¥–Ω–æ–π vApp,
    —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤ –∏—Ç–æ–≥–∞—Ö.
    """
    try:
        token = get_bearer_token(CONFIG)
        df = get_vapps(CONFIG, token, force_update=True)
        if df.empty:
            await callback.answer("‚ö†Ô∏è‚ÄØ–ù–µ—Ç‚ÄØ–¥–∞–Ω–Ω—ã—Ö‚ÄØ–æ‚ÄØvApp.", show_alert=True)
            return

        # --- –ª–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ ---
        vdc_url = f"{CONFIG['base_url']}/api/vdc/{CONFIG['vdc_id']}"
        hdrs = {
            "Accept": "application/*+xml;version=39.1",
            "Authorization": f"Bearer {token}"
        }
        r = requests.get(vdc_url, headers=hdrs, verify=False)
        r.raise_for_status()
        ns = {"v": "http://www.vmware.com/vcloud/v1.5"}
        root = ET.fromstring(r.text)
        cpu_vcpu = int(root.find(".//v:Cpu/v:Allocated", ns).text) / 1000 / 1.73
        ram_gb = int(root.find(".//v:Memory/v:Allocated", ns).text) / 1024

        storage_tb = get_storage_limits(CONFIG, token)
        total_storage_gb = storage_tb * 1024 or 1

        df["vCPU %"] = df["vCPU"] / cpu_vcpu * 100
        df["RAM %"] = df["RAM (–ì–ë)"] / ram_gb * 100
        df["–î–∏—Å–∫ %"] = df["–î–∏—Å–∫ (–ì–ë)"] / total_storage_gb * 100
        df = df.round({"RAM (–ì–ë)": 1, "–î–∏—Å–∫ (–ì–ë)": 1,
                       "vCPU %": 1, "RAM %": 1, "–î–∏—Å–∫ %": 1})

        # --- —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ ---
        lines = ["<b>üìä‚ÄØ–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞‚ÄØ–≤—Å–µ—Ö‚ÄØvApp</b>", "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"]
        total_cpu = df["vCPU"].sum()
        total_ram = df["RAM (–ì–ë)"].sum()
        total_disk = df["–î–∏—Å–∫ (–ì–ë)"].sum()

        total_cpu_pct = total_cpu / cpu_vcpu * 100
        total_ram_pct = total_ram / ram_gb * 100
        total_disk_pct = total_disk / total_storage_gb * 100

        for _, r in df.iterrows():
            name = r["–ò–º—è vApp"]
            lines.append(
                f"<b>{name}</b>\n"
                f"‚Ä¢‚ÄØCPU‚ÄØ{r['vCPU']}‚ÄØ({r['vCPU %']:.1f}‚ÄØ%)\n"
                f"‚Ä¢‚ÄØRAM‚ÄØ{r['RAM (–ì–ë)']:.1f}‚ÄØGB‚ÄØ({r['RAM %']:.1f}‚ÄØ%)\n"
                f"‚Ä¢‚ÄØDisk‚ÄØ{r['–î–∏—Å–∫ (–ì–ë)']:.1f}‚ÄØGB‚ÄØ({r['–î–∏—Å–∫ %']:.1f}‚ÄØ%)\n"
                "‚Äî‚Äî‚Äî‚Äî‚Äî"
            )

        # --- –∏—Ç–æ–≥ ---
        lines.append(
            f"<b>–ò–¢–û–ì–û:</b>‚ÄØ{len(df)}‚ÄØvApp‚ÄØ‚îÇ‚ÄØ"
            f"CPU‚ÄØ{int(total_cpu)}‚ÄØ({total_cpu_pct:.1f}‚ÄØ%)‚ÄØ‚îÇ‚ÄØ"
            f"RAM‚ÄØ{total_ram:.1f}‚ÄØGB‚ÄØ({total_ram_pct:.1f}‚ÄØ%)‚ÄØ‚îÇ‚ÄØ"
            f"Disk‚ÄØ{total_disk:.1f}‚ÄØGB‚ÄØ({total_disk_pct:.1f}‚ÄØ%)"
        )

        text = "\n".join(lines)

        # --- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬´–ù–∞–∑–∞–¥¬ª ---
        kb = InlineKeyboardBuilder()
        kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è‚ÄØ–ù–∞–∑–∞–¥", callback_data="back:vapp_list"))

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=kb.as_markup()
        )
        await callback.answer()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞‚ÄØMobile‚Äë—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏‚ÄØ–≤—Å–µ—Ö‚ÄØvApp:‚ÄØ{e}")
        await callback.answer("–û—à–∏–±–∫–∞‚ÄØ–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è‚ÄØMobile‚Äë–≤–µ—Ä—Å–∏–∏.", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("vappinfo:"))
async def callback_info(callback: types.CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É vApp"""
    vapp_name = callback.data.split(":", 1)[1]
    try:
        token = get_bearer_token(CONFIG)
        text = describe_single_vapp(CONFIG, token, vapp_name)
        await callback.message.edit_text(
            text, parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è‚ÄØ–ù–∞–∑–∞–¥", callback_data="back:vapp_list")]]
            )
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ vApp: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("back:"))
async def callback_back(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ '–ù–∞–∑–∞–¥'"""
    try:
        action = callback.data.split(":", 1)[1]

        if action == "vapp_list":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ vApp
            token = get_bearer_token(CONFIG)
            df = get_vapps(CONFIG, token)
            kb = keyboard_vapp_list(df, page=1)
            await callback.message.edit_text(
                "üì¶‚ÄØ–í—ã–±–µ—Ä–∏‚ÄØvApp‚ÄØ–∏–∑‚ÄØ—Å–ø–∏—Å–∫–∞:",
                reply_markup=kb
            )
            await callback.answer()
            return

        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ ¬´–ù–∞–∑–∞–¥¬ª, –≤–∫–ª—é—á–∞—è main, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        await callback.answer()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥': {e}")
        await callback.answer("–û—à–∏–±–∫–∞‚ÄØ–≤–æ–∑–≤—Ä–∞—Ç–∞.", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("vappinfo_pc:"))
async def callback_vapp_info_pc(callback: types.CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è vApp –≤ —à–∏—Ä–æ–∫–æ–º —Ç–∞–±–ª–∏—á–Ω–æ–º (–ü–ö) –≤–∏–¥–µ"""
    vapp_name = callback.data.split(":", 1)[1]
    try:
        token = get_bearer_token(CONFIG)
        text = describe_single_vapp_pc(CONFIG, token, vapp_name)
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard_vapp_detail(vapp_name)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ PC‚Äë–∏–Ω—Ñ–æ vApp: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è‚ÄØ–ü–ö.", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("vappinfo_mobile:"))
async def callback_vapp_info_mobile(callback: types.CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è vApp –≤ –º–æ–±–∏–ª—å–Ω–æ–º (–∫–∞—Ä—Ç–æ—á–Ω–æ–º) –≤–∏–¥–µ"""
    vapp_name = callback.data.split(":", 1)[1]
    try:
        token = get_bearer_token(CONFIG)
        # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥
        original_describe = describe_single_vapp(CONFIG, token, vapp_name)
        # –≤—ã—Ä–µ–∂–µ–º –∫–æ–¥–æ–≤—ã–π –±–ª–æ–∫ –∏ —Å–¥–µ–ª–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
        mobile_text = (
            original_describe
            .replace("<pre>", "")
            .replace("</pre>", "")
            .replace("|", "‚îÇ")
            .replace("=", "‚îÄ")
            .replace("-", "¬∑")
        )
        await callback.message.edit_text(
            mobile_text,
            parse_mode="HTML",
            reply_markup=keyboard_vapp_detail(vapp_name)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Mobile‚Äë–∏–Ω—Ñ–æ vApp: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Mobile‚Äë–≤–µ—Ä—Å–∏–∏.", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("vappinfo_csv:"))
async def callback_vapp_info_csv(callback: types.CallbackQuery):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç CSV‚Äë—Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–∫–∞–∫ –≤ PC‚Äë—Ç–∞–±–ª–∏—Ü–µ)"""
    import io
    vapp_name = callback.data.split(":", 1)[1]
    logger.info(f"üì§‚ÄØ–ó–∞–ø—Ä–æ—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV‚ÄØ–¥–ª—è‚ÄØvApp‚ÄØ'{vapp_name}'")
    try:
        token = get_bearer_token(CONFIG)
        ns = {"v": "http://www.vmware.com/vcloud/v1.5"}

        # –ø–æ–ª—É—á–∏–º XML –Ω—É–∂–Ω–æ–≥–æ vApp
        df = get_vapps(CONFIG, token)
        row = df[df["–ò–º—è vApp"] == vapp_name]
        if row.empty:
            await callback.answer("vApp –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        href = row.iloc[0]["href"]
        vapp_id = href.split("vapp-")[-1]
        url = f"{CONFIG['base_url']}/api/vApp/vapp-{vapp_id}"
        headers = {
            "Accept": "application/*+xml;version=40.0.0-alpha",
            "Authorization": f"Bearer {token}"
        }
        r = requests.get(url, headers=headers, verify=False, timeout=30)
        r.raise_for_status()
        root = ET.fromstring(r.text)
        vms = root.findall("v:Children/v:Vm", ns)

        data = []
        total_cpu = total_ram = total_disk = total_snap = 0
        for vm in vms:
            name = vm.attrib.get("name", "-")
            spec = vm.find("v:VmSpecSection", ns)
            cpu = 0
            ram_gb = disk_gb = 0.0
            if spec is not None:
                numcpu = spec.find("v:NumCpus", ns)
                if numcpu is not None and numcpu.text:
                    cpu = int(numcpu.text)
                mem = spec.find("v:MemoryResourceMb/v:Configured", ns)
                if mem is not None and mem.text.isdigit():
                    ram_gb = round(int(mem.text) / 1024, 1)
                for d in spec.findall("v:DiskSection/v:DiskSettings/v:SizeMb", ns):
                    if d.text and d.text.isdigit():
                        disk_gb += int(d.text) / 1024

            nc = vm.find("v:NetworkConnectionSection/v:NetworkConnection", ns)
            net = nc.attrib.get("network", "-") if nc is not None else "-"
            ip = ""
            ip_el = nc.find("v:IpAddress", ns) if nc is not None else None
            if ip_el is not None and ip_el.text:
                ip = ip_el.text

            storage = vm.find("v:StorageProfile", ns)
            storage_name = storage.attrib.get("name", "-") if storage is not None else "-"

            snap_count = 0
            snap_size_gb = 0.0
            snap_section = vm.find("v:SnapshotSection", ns)
            if snap_section is not None:
                for s in snap_section.findall("v:Snapshot", ns):
                    snap_count += 1
                    try:
                        snap_size_gb += int(s.attrib.get("size", "0")) / 1024**3
                    except ValueError:
                        pass

            total_cpu += cpu
            total_ram += ram_gb
            total_disk += disk_gb
            total_snap += snap_size_gb

            data.append({
                "–ò–º—è‚ÄØ–í–ú": name,
                "Network": net,
                "IP‚ÄëAddress": ip,
                "CPU": cpu,
                "RAM(GB)": ram_gb,
                "Disk(GB)": round(disk_gb, 1),
                "Storage": storage_name,
                "Snaps": snap_count,
                "Snap‚ÄØSize(GB)": round(snap_size_gb, 1)
            })

        # –¥–æ–±–∞–≤–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        data.append({
            "–ò–º—è‚ÄØ–í–ú": "–ò–¢–û–ì–û",
            "Network": f"VM‚ÄØcount:‚ÄØ{len(vms)}",
            "IP‚ÄëAddress": "",
            "CPU": total_cpu,
            "RAM(GB)": round(total_ram, 1),
            "Disk(GB)": round(total_disk, 1),
            "Storage": "",
            "Snaps": "",
            "Snap‚ÄØSize(GB)": round(total_snap, 1),
        })
        logger.info(f"üßÆ‚ÄØ–°–æ–±—Ä–∞–Ω–æ‚ÄØ{len(vms)}‚ÄØ–í–ú‚ÄØ–¥–ª—è‚ÄØCSV‚ÄØ'{vapp_name}'")

        # –≥–µ–Ω–µ—Ä–∏–º CSV
        df_out = pd.DataFrame(data)
        buf = io.StringIO()
        df_out.to_csv(buf, index=False)
        buf.seek(0)
        await callback.message.answer_document(
            types.BufferedInputFile(buf.read().encode("utf-8"), filename=f"{vapp_name}.csv"),
            caption=f"üìÑ‚ÄØ–≠–∫—Å–ø–æ—Ä—Ç‚ÄØvApp‚ÄØ<b>{vapp_name}</b>",
            parse_mode="HTML"
        )
        logger.info(f"‚úÖ‚ÄØ–§–∞–π–ª‚ÄØCSV‚ÄØ('{vapp_name}.csv')‚ÄØ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω,‚ÄØ{len(df_out)}‚ÄØ—Å—Ç—Ä–æ–∫.")
        await callback.answer()
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞‚ÄØCSV‚Äë—ç–∫—Å–ø–æ—Ä—Ç–∞‚ÄØvApp‚ÄØ{vapp_name}:‚ÄØ{e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ CSV.", show_alert=True)