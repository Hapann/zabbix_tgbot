# handlers/callbacks.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from database import db

router = Router()

class CommentState(StatesGroup):
    waiting_comment = State()

@router.callback_query(F.data.startswith("take:"))
async def take_incident(callback: CallbackQuery):
    event_id = callback.data.split(":")[1]
    user = callback.from_user
    username = f"@{user.username}" if user.username else user.full_name
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await db.execute(
        "UPDATE incidents SET status = 'in_progress', assigned_to = $1 "
        "WHERE event_id = $2 AND status = 'open'",
        username, event_id
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–Ω–æ–≤–∏–ª–∞—Å—å –ª–∏ –∑–∞–ø–∏—Å—å
    incident = await db.fetchrow(
        "SELECT * FROM incidents WHERE event_id = $1", event_id
    )
    
    if incident and incident['status'] == 'in_progress':
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update_incident_message(incident)
        await callback.answer(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ —Ä–∞–±–æ—Ç—É")

@router.callback_query(F.data.startswith(("close:", "reject:")))
async def handle_resolution(callback: CallbackQuery, state: FSMContext):
    action, event_id = callback.data.split(":")[:2]
    await state.update_data(action=action, event_id=event_id)
    await state.set_state(CommentState.waiting_comment)
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è {'–∑–∞–∫—Ä—ã—Ç–∏—è' if action == 'close' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è'}:",
        reply_to_message_id=callback.message.message_id
    )

@router.message(CommentState.waiting_comment)
async def process_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    action = data['action']
    event_id = data['event_id']
    comment = message.text
    status = 'closed' if action == 'close' else 'rejected'
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –ë–î
    await db.execute(
        "UPDATE incidents SET status = $1, resolution_comment = $2 "
        "WHERE event_id = $3",
        status, comment, event_id
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    incident = await db.fetchrow(
        "SELECT * FROM incidents WHERE event_id = $1", event_id
    )
    
    if incident:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update_incident_message(incident, remove_buttons=True)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Zabbix
        await zabbix_api.acknowledge_event(event_id, comment)
    
    await state.clear()

async def update_incident_message(incident: dict, remove_buttons=False):
    status_text = {
        'open': "üü° –û—Ç–∫—Ä—ã—Ç",
        'in_progress': "üî¥ –í —Ä–∞–±–æ—Ç–µ",
        'closed': "üü¢ –ó–∞–∫—Ä—ã—Ç",
        'rejected': "‚ö™ –û—Ç–∫–ª–æ–Ω–µ–Ω"
    }
    
    text = f"{incident['original_text']}\n\n"
    text += f"*–°—Ç–∞—Ç—É—Å:* {status_text[incident['status']]}\n"
    
    if incident['assigned_to']:
        text += f"*–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {incident['assigned_to']}\n"
    
    if incident['resolution_comment']:
        text += f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {incident['resolution_comment']}"
    
    reply_markup = None
    if not remove_buttons and incident['status'] == 'in_progress':
        reply_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close:{incident['event_id']}")],
            [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{incident['event_id']}")]
        ])
    
    await bot.edit_message_text(
        chat_id=incident['chat_id'],
        message_id=incident['message_id'],
        text=text,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )