import os
import glob
import html
from pathlib import Path
from aiogram import Router
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from logger.logger import logger
from globals.config import ADMIN_IDS  # —Å–ø–∏—Å–æ–∫ id –∞–¥–º–∏–Ω–æ–≤

router = Router()

LOGS_DIR = Path("logs")
DEFAULT_LINES = 50
TELEGRAM_LIMIT = 4000  # –ª–∏–º–∏—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏


# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------

async def _tail(filepath: str, lines: int = 50) -> list[str]:
    """–í–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞."""
    logger.debug(f"_tail(): –ß–∏—Ç–∞–µ–º {lines} —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ {filepath}")
    try:
        with open(filepath, "rb") as f:
            f.seek(0, os.SEEK_END)
            end = f.tell()
            block_size = 1024

            data = b""
            line_count = 0

            while end > 0 and line_count <= lines:
                read_size = block_size if end >= block_size else end
                end -= read_size
                f.seek(end)
                block = f.read(read_size)
                data = block + data
                line_count = data.count(b"\n")

        text = data.decode(errors="ignore")
        logger.debug(f"_tail(): –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return text.strip().splitlines()[-lines:]
    except Exception as e:
        logger.error(f"_tail(): –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {filepath}: {e}", exc_info=True)
        raise


def _list_log_dirs() -> dict[str, list[str]]:
    """–í–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–∞—Ä—å {–¥–∞—Ç–∞: [—Ñ–∞–π–ª—ã]}."""
    dirs = {}
    logger.debug(f"_list_log_dirs(): –ò—â–µ–º –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ –ª–æ–≥–æ–≤ –≤ {LOGS_DIR}")
    if not LOGS_DIR.exists():
        logger.warning(f"_list_log_dirs(): –ü–∞–ø–∫–∞ {LOGS_DIR} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return {}

    for subdir in sorted(LOGS_DIR.iterdir()):
        if subdir.is_dir():
            files = [f.name for f in sorted(subdir.glob('*.log'))]
            if files:
                dirs[subdir.name] = files
                logger.debug(f"_list_log_dirs(): –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã {files} –≤ –ø–∞–ø–∫–µ {subdir.name}")
    return dirs


def _latest_file_in_date(date: str) -> str | None:
    """–ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ –¥–∞—Ç—ã."""
    date_dir = LOGS_DIR / date
    logger.debug(f"_latest_file_in_date(): –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –∑–∞ {date} –≤ {date_dir}")
    if not date_dir.exists():
        logger.warning(f"_latest_file_in_date(): –ü–∞–ø–∫–∏ {date_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return None

    files = list(date_dir.glob("*.log"))
    if not files:
        logger.warning(f"_latest_file_in_date(): –í –ø–∞–ø–∫–µ {date} –Ω–µ—Ç –ª–æ–≥–æ–≤")
        return None

    files.sort(key=os.path.getmtime, reverse=True)
    logger.debug(f"_latest_file_in_date(): –°–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª: {files[0]}")
    return str(files[0])


# ---------- –•—ç–Ω–¥–ª–µ—Ä ----------

@router.message(Command("logs"))
async def cmd_logs(message: Message):
    telegram_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    args = message.text.split()

    logger.info(f"/logs –≤—ã–∑–≤–∞–ª [{telegram_id}|@{username}] ‚Üí args={args}")

    # --- –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ ---
    if telegram_id not in ADMIN_IDS:
        await message.answer(
            "‚ùå –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
            "‚ÑπÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: /help"
        )
        logger.warning(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{telegram_id}|@{username}] –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /logs –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞")
        return

    # --- –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ---
    if len(args) == 1:
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "üìÇ `/logs list` ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –∏ —Ñ–∞–π–ª–æ–≤\n"
            "üóì `/logs date YYYY-MM-DD` ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ –∑–∞ –¥–∞—Ç—É\n"
            "üìÑ `/logs date YYYY-MM-DD filename.log` ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª\n"
            "üìú `/logs date YYYY-MM-DD N` ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞\n"
            "üìú `/logs date YYYY-MM-DD filename.log N` ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞\n",
            parse_mode="Markdown"
        )
        logger.debug("/logs: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        return

    # --- —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ ---
    if args[1] == "list":
        data = _list_log_dirs()
        if not data:
            await message.answer("‚ö†Ô∏è –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            logger.warning("/logs list: –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        lines = ["üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏:"]
        for date, files in data.items():
            lines.append(f"\nüóì {date}:")
            for f in files:
                lines.append(f"  ‚îî {f}")

        safe_text = html.escape("\n".join(lines))
        await message.answer(f"<pre>{safe_text}</pre>", parse_mode="HTML")
        logger.info(f"[admin:{telegram_id}] –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {len(data)} –¥–∞—Ç")
        return

    # --- —Ä–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–æ–π ---
    if args[1] == "date":
        if len(args) < 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç!\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "üóì `/logs date YYYY-MM-DD`\n"
                "üìÑ `/logs date YYYY-MM-DD filename.log`\n"
                "üìú `/logs date YYYY-MM-DD N`\n"
                "üìú `/logs date YYYY-MM-DD filename.log N`",
                parse_mode="Markdown"
            )
            logger.warning("/logs date –≤—ã–∑–≤–∞–Ω –±–µ–∑ –¥–∞—Ç—ã ‚Üí –æ—Ç–∫–∞–∑")
            return

        date = args[2]
        file_name = None
        lines = None

        if len(args) == 5 and args[4].isdigit():
            file_name = args[3]
            lines = int(args[4])
            logger.debug(f"/logs date: file={file_name}, lines={lines}")
        elif len(args) == 4 and args[3].isdigit():
            lines = int(args[3])
            logger.debug(f"/logs date: lines={lines}")
        elif len(args) == 4:
            file_name = args[3]
            logger.debug(f"/logs date: file={file_name}")
        else:
            logger.debug("/logs date: —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ ‚Üí –±–µ—Ä—ë–º –≤–µ—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª")

        # –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        if file_name:
            log_file = LOGS_DIR / date / file_name
            if not log_file.exists():
                await message.answer(f"‚ö†Ô∏è –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {date}")
                logger.warning(f"/logs date {date}: –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            log_file = str(log_file)
        else:
            log_file = _latest_file_in_date(date)
            if not log_file:
                await message.answer(f"‚ö†Ô∏è –ù–µ—Ç –ª–æ–≥–æ–≤ –∑–∞ {date}")
                logger.warning(f"/logs date {date}: –õ–æ–≥–æ–≤ –Ω–µ—Ç")
                return

        # –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        try:
            if lines:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
                logger.debug(f"/logs: —á–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ –∏–∑ {log_file}")
                lines_data = await _tail(log_file, lines=lines)
                text = "\n".join(lines_data)

                if len(text) > TELEGRAM_LIMIT:
                    logger.debug("/logs: —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª")
                    doc = FSInputFile(log_file)
                    await message.answer_document(doc)
                else:
                    safe_text = html.escape(text)
                    await message.answer(
                        f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ –∏–∑ {os.path.basename(log_file)}:\n\n<pre>{safe_text}</pre>",
                        parse_mode="HTML"
                    )

                logger.info(f"[admin:{telegram_id}] –ø–æ–ª—É—á–∏–ª {lines} —Å—Ç—Ä–æ–∫ –∏–∑ {log_file}")

            else:  # —Ñ–∞–π–ª —Ü–µ–ª–∏–∫–æ–º
                logger.debug(f"/logs: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ñ–∞–π–ª {log_file}")
                doc = FSInputFile(log_file)
                await message.answer_document(doc)
                logger.info(f"[admin:{telegram_id}] –≤—ã–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª {log_file} –ø–æ–ª–Ω–æ—Å—Ç—å—é")

        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            logger.error(f"/logs: –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {log_file}: {e}", exc_info=True)
        return

    # --- –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞ ---
    await message.answer(
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç!\n\n"
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
        "üìÇ `/logs list`\n"
        "üóì `/logs date YYYY-MM-DD`\n"
        "üìÑ `/logs date YYYY-MM-DD filename.log`\n"
        "üìú `/logs date YYYY-MM-DD N`\n"
        "üìú `/logs date YYYY-MM-DD filename.log N`",
        parse_mode="Markdown"
    )
    logger.warning(f"/logs –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞: args={args}")


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–∞ ===
def register_logs_pm_handler(app):
    app.include_router(router)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /logs –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")